package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/backgroundservice"
)

// BackgroundService executes a cdproto command under BackgroundService domain.
type BackgroundService struct {
	ctxWithExecutor context.Context
}

// StartObserving enables event updates for the service.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/BackgroundService#method-startObserving
//
// parameters:
//  - `service`
func (doBackgroundService BackgroundService) StartObserving(service backgroundservice.ServiceName) (err error) {
	b := backgroundservice.StartObserving(service)
	return b.Do(doBackgroundService.ctxWithExecutor)
}

// StopObserving disables event updates for the service.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/BackgroundService#method-stopObserving
//
// parameters:
//  - `service`
func (doBackgroundService BackgroundService) StopObserving(service backgroundservice.ServiceName) (err error) {
	b := backgroundservice.StopObserving(service)
	return b.Do(doBackgroundService.ctxWithExecutor)
}

// SetRecording set the recording state for the service.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/BackgroundService#method-setRecording
//
// parameters:
//  - `shouldRecord`
//  - `service`
func (doBackgroundService BackgroundService) SetRecording(shouldRecord bool, service backgroundservice.ServiceName) (err error) {
	b := backgroundservice.SetRecording(shouldRecord, service)
	return b.Do(doBackgroundService.ctxWithExecutor)
}

// ClearEvents clears all stored data for the service.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/BackgroundService#method-clearEvents
//
// parameters:
//  - `service`
func (doBackgroundService BackgroundService) ClearEvents(service backgroundservice.ServiceName) (err error) {
	b := backgroundservice.ClearEvents(service)
	return b.Do(doBackgroundService.ctxWithExecutor)
}
