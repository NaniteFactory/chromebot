package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/browser"
	"github.com/chromedp/cdproto/target"
)

// Browser executes a cdproto command under Browser domain.
type Browser struct {
	ctxWithExecutor context.Context
}

// SetPermission set permission settings for given origin.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Browser#method-setPermission
//
// parameters:
//  - `origin`: Origin the permission applies to.
//  - `permission`: Descriptor of permission to override.
//  - `setting`: Setting of the permission.
//  - `browserContextID`: This can be nil. (Optional) Context to override. When omitted, default browser context is used.
func (doBrowser Browser) SetPermission(origin string, permission *browser.PermissionDescriptor, setting browser.PermissionSetting, browserContextID *target.ID) (err error) {
	b := browser.SetPermission(origin, permission, setting)
	if browserContextID != nil {
		b = b.WithBrowserContextID(*browserContextID)
	}
	return b.Do(doBrowser.ctxWithExecutor)
}

// GrantPermissions grant specific permissions to the given origin and reject
// all others.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Browser#method-grantPermissions
//
// parameters:
//  - `origin`
//  - `permissions`
//  - `browserContextID`: This can be nil. (Optional) BrowserContext to override permissions. When omitted, default browser context is used.
func (doBrowser Browser) GrantPermissions(origin string, permissions []browser.PermissionType, browserContextID *target.BrowserContextID) (err error) {
	b := browser.GrantPermissions(origin, permissions)
	if browserContextID != nil {
		b = b.WithBrowserContextID(*browserContextID)
	}
	return b.Do(doBrowser.ctxWithExecutor)
}

// ResetPermissions reset all permission management for all origins.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Browser#method-resetPermissions
//
// parameters:
//  - `browserContextID`: This can be nil. (Optional) BrowserContext to reset permissions. When omitted, default browser context is used.
func (doBrowser Browser) ResetPermissions(browserContextID *target.BrowserContextID) (err error) {
	b := browser.ResetPermissions()
	if browserContextID != nil {
		b = b.WithBrowserContextID(*browserContextID)
	}
	return b.Do(doBrowser.ctxWithExecutor)
}

// Close close browser gracefully.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Browser#method-close
func (doBrowser Browser) Close() (err error) {
	b := browser.Close()
	return b.Do(doBrowser.ctxWithExecutor)
}

// Crash crashes browser on the main thread.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Browser#method-crash
func (doBrowser Browser) Crash() (err error) {
	b := browser.Crash()
	return b.Do(doBrowser.ctxWithExecutor)
}

// CrashGpuProcess crashes GPU process.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Browser#method-crashGpuProcess
func (doBrowser Browser) CrashGpuProcess() (err error) {
	b := browser.CrashGpuProcess()
	return b.Do(doBrowser.ctxWithExecutor)
}

// GetVersion returns version information.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Browser#method-getVersion
//
// returns:
//  - `retProtocolVersion`: Protocol version.
//  - `retProduct`: Product name.
//  - `retRevision`: Product revision.
//  - `retUserAgent`: User-Agent.
//  - `retJsVersion`: V8 version.
func (doBrowser Browser) GetVersion() (retProtocolVersion string, retProduct string, retRevision string, retUserAgent string, retJsVersion string, err error) {
	b := browser.GetVersion()
	return b.Do(doBrowser.ctxWithExecutor)
}

// GetBrowserCommandLine returns the command line switches for the browser
// process if, and only if --enable-automation is on the commandline.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Browser#method-getBrowserCommandLine
//
// returns:
//  - `retArguments`: Commandline parameters
func (doBrowser Browser) GetBrowserCommandLine() (retArguments []string, err error) {
	b := browser.GetBrowserCommandLine()
	return b.Do(doBrowser.ctxWithExecutor)
}

// GetHistograms get Chrome histograms.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Browser#method-getHistograms
//
// parameters:
//  - `query`: This can be nil. (Optional) Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
//  - `delta`: This can be nil. (Optional) If true, retrieve delta since last call.
//
// returns:
//  - `retHistograms`: Histograms.
func (doBrowser Browser) GetHistograms(query *string, delta *bool) (retHistograms []*browser.Histogram, err error) {
	b := browser.GetHistograms()
	if query != nil {
		b = b.WithQuery(*query)
	}
	if delta != nil {
		b = b.WithDelta(*delta)
	}
	return b.Do(doBrowser.ctxWithExecutor)
}

// GetHistogram get a Chrome histogram by name.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Browser#method-getHistogram
//
// parameters:
//  - `name`: Requested histogram name.
//  - `delta`: This can be nil. (Optional) If true, retrieve delta since last call.
//
// returns:
//  - `retHistogram`: Histogram.
func (doBrowser Browser) GetHistogram(name string, delta *bool) (retHistogram *browser.Histogram, err error) {
	b := browser.GetHistogram(name)
	if delta != nil {
		b = b.WithDelta(*delta)
	}
	return b.Do(doBrowser.ctxWithExecutor)
}

// GetWindowBounds get position and size of the browser window.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Browser#method-getWindowBounds
//
// parameters:
//  - `windowID`: Browser window id.
//
// returns:
//  - `retBounds`: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
func (doBrowser Browser) GetWindowBounds(windowID browser.WindowID) (retBounds *browser.Bounds, err error) {
	b := browser.GetWindowBounds(windowID)
	return b.Do(doBrowser.ctxWithExecutor)
}

// GetWindowForTarget get the browser window that contains the devtools
// target.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Browser#method-getWindowForTarget
//
// parameters:
//  - `targetID`: This can be nil. (Optional) Devtools agent host id. If called as a part of the session, associated targetId is used.
//
// returns:
//  - `retWindowID`: Browser window id.
//  - `retBounds`: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
func (doBrowser Browser) GetWindowForTarget(targetID *target.ID) (retWindowID browser.WindowID, retBounds *browser.Bounds, err error) {
	b := browser.GetWindowForTarget()
	if targetID != nil {
		b = b.WithTargetID(*targetID)
	}
	return b.Do(doBrowser.ctxWithExecutor)
}

// SetWindowBounds set position and/or size of the browser window.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Browser#method-setWindowBounds
//
// parameters:
//  - `windowID`: Browser window id.
//  - `bounds`: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
func (doBrowser Browser) SetWindowBounds(windowID browser.WindowID, bounds *browser.Bounds) (err error) {
	b := browser.SetWindowBounds(windowID, bounds)
	return b.Do(doBrowser.ctxWithExecutor)
}

// SetDockTile set dock tile details, platform-specific.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Browser#method-setDockTile
//
// parameters:
//  - `badgeLabel`
//  - `image`: This can be nil. (Optional) Png encoded image.
func (doBrowser Browser) SetDockTile(badgeLabel *string, image *string) (err error) {
	b := browser.SetDockTile()
	if badgeLabel != nil {
		b = b.WithBadgeLabel(*badgeLabel)
	}
	if image != nil {
		b = b.WithImage(*image)
	}
	return b.Do(doBrowser.ctxWithExecutor)
}
