package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/cdp"
	"github.com/chromedp/cdproto/dom"
	"github.com/chromedp/cdproto/overlay"
	"github.com/chromedp/cdproto/runtime"
	"github.com/mailru/easyjson"
)

// Overlay executes a cdproto command under Overlay domain.
type Overlay struct {
	ctxWithExecutor context.Context
}

// Disable disables domain notifications.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-disable
func (doOverlay Overlay) Disable() (err error) {
	b := overlay.Disable()
	return b.Do(doOverlay.ctxWithExecutor)
}

// Enable enables domain notifications.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-enable
func (doOverlay Overlay) Enable() (err error) {
	b := overlay.Enable()
	return b.Do(doOverlay.ctxWithExecutor)
}

// GetHighlightObjectForTest for testing.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-getHighlightObjectForTest
//
// parameters:
//  - `nodeID`: Id of the node to get highlight object for.
//  - `includeDistance`: This can be nil. (Optional) Whether to include distance info.
//  - `includeStyle`: This can be nil. (Optional) Whether to include style info.
//
// returns:
//  - `retHighlight`: Highlight data for the node.
func (doOverlay Overlay) GetHighlightObjectForTest(nodeID cdp.NodeID, includeDistance *bool, includeStyle *bool) (retHighlight easyjson.RawMessage, err error) {
	b := overlay.GetHighlightObjectForTest(nodeID)
	if includeDistance != nil {
		b = b.WithIncludeDistance(*includeDistance)
	}
	if includeStyle != nil {
		b = b.WithIncludeStyle(*includeStyle)
	}
	return b.Do(doOverlay.ctxWithExecutor)
}

// HideHighlight hides any highlight.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-hideHighlight
func (doOverlay Overlay) HideHighlight() (err error) {
	b := overlay.HideHighlight()
	return b.Do(doOverlay.ctxWithExecutor)
}

// HighlightFrame highlights owner element of the frame with given id.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-highlightFrame
//
// parameters:
//  - `frameID`: Identifier of the frame to highlight.
//  - `contentColor`: This can be nil. (Optional) The content box highlight fill color (default: transparent).
//  - `contentOutlineColor`: This can be nil. (Optional) The content box highlight outline color (default: transparent).
func (doOverlay Overlay) HighlightFrame(frameID cdp.FrameID, contentColor *cdp.RGBA, contentOutlineColor *cdp.RGBA) (err error) {
	b := overlay.HighlightFrame(frameID)
	if contentColor != nil {
		b = b.WithContentColor(contentColor)
	}
	if contentOutlineColor != nil {
		b = b.WithContentOutlineColor(contentOutlineColor)
	}
	return b.Do(doOverlay.ctxWithExecutor)
}

// HighlightNode highlights DOM node with given id or with the given
// JavaScript object wrapper. Either nodeId or objectId must be specified.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-highlightNode
//
// parameters:
//  - `highlightConfig`: A descriptor for the highlight appearance.
//  - `nodeID`: This can be nil. (Optional) Identifier of the node to highlight.
//  - `backendNodeID`: This can be nil. (Optional) Identifier of the backend node to highlight.
//  - `objectID`: This can be nil. (Optional) JavaScript object id of the node to be highlighted.
//  - `selector`: This can be nil. (Optional) Selectors to highlight relevant nodes.
func (doOverlay Overlay) HighlightNode(highlightConfig *overlay.HighlightConfig, nodeID *cdp.NodeID, backendNodeID *cdp.BackendNodeID, objectID *runtime.RemoteObjectID, selector *string) (err error) {
	b := overlay.HighlightNode(highlightConfig)
	if nodeID != nil {
		b = b.WithNodeID(*nodeID)
	}
	if backendNodeID != nil {
		b = b.WithBackendNodeID(*backendNodeID)
	}
	if objectID != nil {
		b = b.WithObjectID(*objectID)
	}
	if selector != nil {
		b = b.WithSelector(*selector)
	}
	return b.Do(doOverlay.ctxWithExecutor)
}

// HighlightQuad highlights given quad. Coordinates are absolute with respect
// to the main frame viewport.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-highlightQuad
//
// parameters:
//  - `quad`: Quad to highlight
//  - `color`: This can be nil. (Optional) The highlight fill color (default: transparent).
//  - `outlineColor`: This can be nil. (Optional) The highlight outline color (default: transparent).
func (doOverlay Overlay) HighlightQuad(quad dom.Quad, color *cdp.RGBA, outlineColor *cdp.RGBA) (err error) {
	b := overlay.HighlightQuad(quad)
	if color != nil {
		b = b.WithColor(color)
	}
	if outlineColor != nil {
		b = b.WithOutlineColor(outlineColor)
	}
	return b.Do(doOverlay.ctxWithExecutor)
}

// HighlightRect highlights given rectangle. Coordinates are absolute with
// respect to the main frame viewport.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-highlightRect
//
// parameters:
//  - `x`: X coordinate
//  - `y`: Y coordinate
//  - `width`: Rectangle width
//  - `height`: Rectangle height
//  - `color`: This can be nil. (Optional) The highlight fill color (default: transparent).
//  - `outlineColor`: This can be nil. (Optional) The highlight outline color (default: transparent).
func (doOverlay Overlay) HighlightRect(x int64, y int64, width int64, height int64, color *cdp.RGBA, outlineColor *cdp.RGBA) (err error) {
	b := overlay.HighlightRect(x, y, width, height)
	if color != nil {
		b = b.WithColor(color)
	}
	if outlineColor != nil {
		b = b.WithOutlineColor(outlineColor)
	}
	return b.Do(doOverlay.ctxWithExecutor)
}

// SetInspectMode enters the 'inspect' mode. In this mode, elements that user
// is hovering over are highlighted. Backend then generates
// 'inspectNodeRequested' event upon element selection.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-setInspectMode
//
// parameters:
//  - `mode`: Set an inspection mode.
//  - `highlightConfig`: This can be nil. (Optional) A descriptor for the highlight appearance of hovered-over nodes. May be omitted if enabled == false.
func (doOverlay Overlay) SetInspectMode(mode overlay.InspectMode, highlightConfig *overlay.HighlightConfig) (err error) {
	b := overlay.SetInspectMode(mode)
	if highlightConfig != nil {
		b = b.WithHighlightConfig(highlightConfig)
	}
	return b.Do(doOverlay.ctxWithExecutor)
}

// SetShowAdHighlights highlights owner element of all frames detected to be
// ads.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-setShowAdHighlights
//
// parameters:
//  - `show`: True for showing ad highlights
func (doOverlay Overlay) SetShowAdHighlights(show bool) (err error) {
	b := overlay.SetShowAdHighlights(show)
	return b.Do(doOverlay.ctxWithExecutor)
}

// SetPausedInDebuggerMessage [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-setPausedInDebuggerMessage
//
// parameters:
//  - `message`: This can be nil. (Optional) The message to display, also triggers resume and step over controls.
func (doOverlay Overlay) SetPausedInDebuggerMessage(message *string) (err error) {
	b := overlay.SetPausedInDebuggerMessage()
	if message != nil {
		b = b.WithMessage(*message)
	}
	return b.Do(doOverlay.ctxWithExecutor)
}

// SetShowDebugBorders requests that backend shows debug borders on layers.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-setShowDebugBorders
//
// parameters:
//  - `show`: True for showing debug borders
func (doOverlay Overlay) SetShowDebugBorders(show bool) (err error) {
	b := overlay.SetShowDebugBorders(show)
	return b.Do(doOverlay.ctxWithExecutor)
}

// SetShowFPSCounter requests that backend shows the FPS counter.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-setShowFPSCounter
//
// parameters:
//  - `show`: True for showing the FPS counter
func (doOverlay Overlay) SetShowFPSCounter(show bool) (err error) {
	b := overlay.SetShowFPSCounter(show)
	return b.Do(doOverlay.ctxWithExecutor)
}

// SetShowPaintRects requests that backend shows paint rectangles.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-setShowPaintRects
//
// parameters:
//  - `result`: True for showing paint rectangles
func (doOverlay Overlay) SetShowPaintRects(result bool) (err error) {
	b := overlay.SetShowPaintRects(result)
	return b.Do(doOverlay.ctxWithExecutor)
}

// SetShowLayoutShiftRegions requests that backend shows layout shift
// regions.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-setShowLayoutShiftRegions
//
// parameters:
//  - `result`: True for showing layout shift regions
func (doOverlay Overlay) SetShowLayoutShiftRegions(result bool) (err error) {
	b := overlay.SetShowLayoutShiftRegions(result)
	return b.Do(doOverlay.ctxWithExecutor)
}

// SetShowScrollBottleneckRects requests that backend shows scroll bottleneck
// rects.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-setShowScrollBottleneckRects
//
// parameters:
//  - `show`: True for showing scroll bottleneck rects
func (doOverlay Overlay) SetShowScrollBottleneckRects(show bool) (err error) {
	b := overlay.SetShowScrollBottleneckRects(show)
	return b.Do(doOverlay.ctxWithExecutor)
}

// SetShowHitTestBorders requests that backend shows hit-test borders on
// layers.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-setShowHitTestBorders
//
// parameters:
//  - `show`: True for showing hit-test borders
func (doOverlay Overlay) SetShowHitTestBorders(show bool) (err error) {
	b := overlay.SetShowHitTestBorders(show)
	return b.Do(doOverlay.ctxWithExecutor)
}

// SetShowViewportSizeOnResize paints viewport size upon main frame resize.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Overlay#method-setShowViewportSizeOnResize
//
// parameters:
//  - `show`: Whether to paint size or not.
func (doOverlay Overlay) SetShowViewportSizeOnResize(show bool) (err error) {
	b := overlay.SetShowViewportSizeOnResize(show)
	return b.Do(doOverlay.ctxWithExecutor)
}
