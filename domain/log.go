package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/log"
)

// Log executes a cdproto command under Log domain.
type Log struct {
	ctxWithExecutor context.Context
}

// Clear clears the log.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Log#method-clear
func (doLog Log) Clear() (err error) {
	b := log.Clear()
	return b.Do(doLog.ctxWithExecutor)
}

// Disable disables log domain, prevents further log entries from being
// reported to the client.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Log#method-disable
func (doLog Log) Disable() (err error) {
	b := log.Disable()
	return b.Do(doLog.ctxWithExecutor)
}

// Enable enables log domain, sends the entries collected so far to the
// client by means of the entryAdded notification.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Log#method-enable
func (doLog Log) Enable() (err error) {
	b := log.Enable()
	return b.Do(doLog.ctxWithExecutor)
}

// StartViolationsReport start violation reporting.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Log#method-startViolationsReport
//
// parameters:
//  - `config`: Configuration for violations.
func (doLog Log) StartViolationsReport(config []*log.ViolationSetting) (err error) {
	b := log.StartViolationsReport(config)
	return b.Do(doLog.ctxWithExecutor)
}

// StopViolationsReport stop violation reporting.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Log#method-stopViolationsReport
func (doLog Log) StopViolationsReport() (err error) {
	b := log.StopViolationsReport()
	return b.Do(doLog.ctxWithExecutor)
}
