package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/webauthn"
)

// WebAuthn executes a cdproto command under WebAuthn domain.
type WebAuthn struct {
	ctxWithExecutor context.Context
}

// Enable enable the WebAuthn domain and start intercepting credential
// storage and retrieval with a virtual authenticator.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/WebAuthn#method-enable
func (doWebAuthn WebAuthn) Enable() (err error) {
	b := webauthn.Enable()
	return b.Do(doWebAuthn.ctxWithExecutor)
}

// Disable disable the WebAuthn domain.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/WebAuthn#method-disable
func (doWebAuthn WebAuthn) Disable() (err error) {
	b := webauthn.Disable()
	return b.Do(doWebAuthn.ctxWithExecutor)
}

// AddVirtualAuthenticator creates and adds a virtual authenticator.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/WebAuthn#method-addVirtualAuthenticator
//
// parameters:
//  - `options`
//
// returns:
//  - `retAuthenticatorID`
func (doWebAuthn WebAuthn) AddVirtualAuthenticator(options *webauthn.VirtualAuthenticatorOptions) (retAuthenticatorID webauthn.AuthenticatorID, err error) {
	b := webauthn.AddVirtualAuthenticator(options)
	return b.Do(doWebAuthn.ctxWithExecutor)
}

// RemoveVirtualAuthenticator removes the given authenticator.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/WebAuthn#method-removeVirtualAuthenticator
//
// parameters:
//  - `authenticatorID`
func (doWebAuthn WebAuthn) RemoveVirtualAuthenticator(authenticatorID webauthn.AuthenticatorID) (err error) {
	b := webauthn.RemoveVirtualAuthenticator(authenticatorID)
	return b.Do(doWebAuthn.ctxWithExecutor)
}

// AddCredential adds the credential to the specified authenticator.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/WebAuthn#method-addCredential
//
// parameters:
//  - `authenticatorID`
//  - `credential`
func (doWebAuthn WebAuthn) AddCredential(authenticatorID webauthn.AuthenticatorID, credential *webauthn.Credential) (err error) {
	b := webauthn.AddCredential(authenticatorID, credential)
	return b.Do(doWebAuthn.ctxWithExecutor)
}

// GetCredential returns a single credential stored in the given virtual
// authenticator that matches the credential ID.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/WebAuthn#method-getCredential
//
// parameters:
//  - `authenticatorID`
//  - `credentialID`
//
// returns:
//  - `retCredential`
func (doWebAuthn WebAuthn) GetCredential(authenticatorID webauthn.AuthenticatorID, credentialID string) (retCredential *webauthn.Credential, err error) {
	b := webauthn.GetCredential(authenticatorID, credentialID)
	return b.Do(doWebAuthn.ctxWithExecutor)
}

// GetCredentials returns all the credentials stored in the given virtual
// authenticator.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/WebAuthn#method-getCredentials
//
// parameters:
//  - `authenticatorID`
//
// returns:
//  - `retCredentials`
func (doWebAuthn WebAuthn) GetCredentials(authenticatorID webauthn.AuthenticatorID) (retCredentials []*webauthn.Credential, err error) {
	b := webauthn.GetCredentials(authenticatorID)
	return b.Do(doWebAuthn.ctxWithExecutor)
}

// RemoveCredential removes a credential from the authenticator.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/WebAuthn#method-removeCredential
//
// parameters:
//  - `authenticatorID`
//  - `credentialID`
func (doWebAuthn WebAuthn) RemoveCredential(authenticatorID webauthn.AuthenticatorID, credentialID string) (err error) {
	b := webauthn.RemoveCredential(authenticatorID, credentialID)
	return b.Do(doWebAuthn.ctxWithExecutor)
}

// ClearCredentials clears all the credentials from the specified device.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/WebAuthn#method-clearCredentials
//
// parameters:
//  - `authenticatorID`
func (doWebAuthn WebAuthn) ClearCredentials(authenticatorID webauthn.AuthenticatorID) (err error) {
	b := webauthn.ClearCredentials(authenticatorID)
	return b.Do(doWebAuthn.ctxWithExecutor)
}

// SetUserVerified sets whether User Verification succeeds or fails for an
// authenticator. The default is true.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/WebAuthn#method-setUserVerified
//
// parameters:
//  - `authenticatorID`
//  - `isUserVerified`
func (doWebAuthn WebAuthn) SetUserVerified(authenticatorID webauthn.AuthenticatorID, isUserVerified bool) (err error) {
	b := webauthn.SetUserVerified(authenticatorID, isUserVerified)
	return b.Do(doWebAuthn.ctxWithExecutor)
}
