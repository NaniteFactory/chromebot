package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/cdp"
	"github.com/chromedp/cdproto/css"
)

// CSS executes a cdproto command under CSS domain.
type CSS struct {
	ctxWithExecutor context.Context
}

// AddRule inserts a new rule with the given ruleText in a stylesheet with
// given styleSheetId, at the position specified by location.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-addRule
//
// parameters:
//  - `styleSheetID`: The css style sheet identifier where a new rule should be inserted.
//  - `ruleText`: The text of a new rule.
//  - `location`: Text position of a new rule in the target style sheet.
//
// returns:
//  - `retRule`: The newly created rule.
func (doCSS CSS) AddRule(styleSheetID css.StyleSheetID, ruleText string, location *css.SourceRange) (retRule *css.Rule, err error) {
	b := css.AddRule(styleSheetID, ruleText, location)
	return b.Do(doCSS.ctxWithExecutor)
}

// CollectClassNames returns all class names from specified stylesheet.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-collectClassNames
//
// parameters:
//  - `styleSheetID`
//
// returns:
//  - `retClassNames`: Class name list.
func (doCSS CSS) CollectClassNames(styleSheetID css.StyleSheetID) (retClassNames []string, err error) {
	b := css.CollectClassNames(styleSheetID)
	return b.Do(doCSS.ctxWithExecutor)
}

// CreateStyleSheet creates a new special "via-inspector" stylesheet in the
// frame with given frameId.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-createStyleSheet
//
// parameters:
//  - `frameID`: Identifier of the frame where "via-inspector" stylesheet should be created.
//
// returns:
//  - `retStyleSheetID`: Identifier of the created "via-inspector" stylesheet.
func (doCSS CSS) CreateStyleSheet(frameID cdp.FrameID) (retStyleSheetID css.StyleSheetID, err error) {
	b := css.CreateStyleSheet(frameID)
	return b.Do(doCSS.ctxWithExecutor)
}

// Disable disables the CSS agent for the given page.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-disable
func (doCSS CSS) Disable() (err error) {
	b := css.Disable()
	return b.Do(doCSS.ctxWithExecutor)
}

// Enable enables the CSS agent for the given page. Clients should not assume
// that the CSS agent has been enabled until the result of this command is
// received.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-enable
func (doCSS CSS) Enable() (err error) {
	b := css.Enable()
	return b.Do(doCSS.ctxWithExecutor)
}

// ForcePseudoState ensures that the given node will have specified
// pseudo-classes whenever its style is computed by the browser.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-forcePseudoState
//
// parameters:
//  - `nodeID`: The element id for which to force the pseudo state.
//  - `forcedPseudoClasses`: Element pseudo classes to force when computing the element's style.
func (doCSS CSS) ForcePseudoState(nodeID cdp.NodeID, forcedPseudoClasses []string) (err error) {
	b := css.ForcePseudoState(nodeID, forcedPseudoClasses)
	return b.Do(doCSS.ctxWithExecutor)
}

// GetBackgroundColors [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-getBackgroundColors
//
// parameters:
//  - `nodeID`: Id of the node to get background colors for.
//
// returns:
//  - `retBackgroundColors`: The range of background colors behind this element, if it contains any visible text. If no visible text is present, this will be undefined. In the case of a flat background color, this will consist of simply that color. In the case of a gradient, this will consist of each of the color stops. For anything more complicated, this will be an empty array. Images will be ignored (as if the image had failed to load).
//  - `retComputedFontSize`: The computed font size for this node, as a CSS computed value string (e.g. '12px').
//  - `retComputedFontWeight`: The computed font weight for this node, as a CSS computed value string (e.g. 'normal' or '100').
func (doCSS CSS) GetBackgroundColors(nodeID cdp.NodeID) (retBackgroundColors []string, retComputedFontSize string, retComputedFontWeight string, err error) {
	b := css.GetBackgroundColors(nodeID)
	return b.Do(doCSS.ctxWithExecutor)
}

// GetComputedStyleForNode returns the computed style for a DOM node
// identified by nodeId.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-getComputedStyleForNode
//
// parameters:
//  - `nodeID`
//
// returns:
//  - `retComputedStyle`: Computed style for the specified DOM node.
func (doCSS CSS) GetComputedStyleForNode(nodeID cdp.NodeID) (retComputedStyle []*css.ComputedStyleProperty, err error) {
	b := css.GetComputedStyleForNode(nodeID)
	return b.Do(doCSS.ctxWithExecutor)
}

// GetInlineStylesForNode returns the styles defined inline (explicitly in
// the "style" attribute and implicitly, using DOM attributes) for a DOM node
// identified by nodeId.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-getInlineStylesForNode
//
// parameters:
//  - `nodeID`
//
// returns:
//  - `retInlineStyle`: Inline style for the specified DOM node.
//  - `retAttributesStyle`: Attribute-defined element style (e.g. resulting from "width=20 height=100%").
func (doCSS CSS) GetInlineStylesForNode(nodeID cdp.NodeID) (retInlineStyle *css.Style, retAttributesStyle *css.Style, err error) {
	b := css.GetInlineStylesForNode(nodeID)
	return b.Do(doCSS.ctxWithExecutor)
}

// GetMatchedStylesForNode returns requested styles for a DOM node identified
// by nodeId.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-getMatchedStylesForNode
//
// parameters:
//  - `nodeID`
//
// returns:
//  - `retInlineStyle`: Inline style for the specified DOM node.
//  - `retAttributesStyle`: Attribute-defined element style (e.g. resulting from "width=20 height=100%").
//  - `retMatchedCSSRules`: CSS rules matching this node, from all applicable stylesheets.
//  - `retPseudoElements`: Pseudo style matches for this node.
//  - `retInherited`: A chain of inherited styles (from the immediate node parent up to the DOM tree root).
//  - `retCSSKeyframesRules`: A list of CSS keyframed animations matching this node.
func (doCSS CSS) GetMatchedStylesForNode(nodeID cdp.NodeID) (retInlineStyle *css.Style, retAttributesStyle *css.Style, retMatchedCSSRules []*css.RuleMatch, retPseudoElements []*css.PseudoElementMatches, retInherited []*css.InheritedStyleEntry, retCSSKeyframesRules []*css.KeyframesRule, err error) {
	b := css.GetMatchedStylesForNode(nodeID)
	return b.Do(doCSS.ctxWithExecutor)
}

// GetMediaQueries returns all media queries parsed by the rendering engine.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-getMediaQueries
//
// returns:
//  - `retMedias`
func (doCSS CSS) GetMediaQueries() (retMedias []*css.Media, err error) {
	b := css.GetMediaQueries()
	return b.Do(doCSS.ctxWithExecutor)
}

// GetPlatformFontsForNode requests information about platform fonts which we
// used to render child TextNodes in the given node.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-getPlatformFontsForNode
//
// parameters:
//  - `nodeID`
//
// returns:
//  - `retFonts`: Usage statistics for every employed platform font.
func (doCSS CSS) GetPlatformFontsForNode(nodeID cdp.NodeID) (retFonts []*css.PlatformFontUsage, err error) {
	b := css.GetPlatformFontsForNode(nodeID)
	return b.Do(doCSS.ctxWithExecutor)
}

// GetStyleSheetText returns the current textual content for a stylesheet.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-getStyleSheetText
//
// parameters:
//  - `styleSheetID`
//
// returns:
//  - `retText`: The stylesheet text.
func (doCSS CSS) GetStyleSheetText(styleSheetID css.StyleSheetID) (retText string, err error) {
	b := css.GetStyleSheetText(styleSheetID)
	return b.Do(doCSS.ctxWithExecutor)
}

// SetEffectivePropertyValueForNode find a rule with the given active
// property for the given node and set the new value for this property.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-setEffectivePropertyValueForNode
//
// parameters:
//  - `nodeID`: The element id for which to set property.
//  - `propertyName`
//  - `value`
func (doCSS CSS) SetEffectivePropertyValueForNode(nodeID cdp.NodeID, propertyName string, value string) (err error) {
	b := css.SetEffectivePropertyValueForNode(nodeID, propertyName, value)
	return b.Do(doCSS.ctxWithExecutor)
}

// SetKeyframeKey modifies the keyframe rule key text.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-setKeyframeKey
//
// parameters:
//  - `styleSheetID`
//  - `range`
//  - `keyText`
//
// returns:
//  - `retKeyText`: The resulting key text after modification.
func (doCSS CSS) SetKeyframeKey(styleSheetID css.StyleSheetID, rangeVal *css.SourceRange, keyText string) (retKeyText *css.Value, err error) {
	b := css.SetKeyframeKey(styleSheetID, rangeVal, keyText)
	return b.Do(doCSS.ctxWithExecutor)
}

// SetMediaText modifies the rule selector.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-setMediaText
//
// parameters:
//  - `styleSheetID`
//  - `range`
//  - `text`
//
// returns:
//  - `retMedia`: The resulting CSS media rule after modification.
func (doCSS CSS) SetMediaText(styleSheetID css.StyleSheetID, rangeVal *css.SourceRange, text string) (retMedia *css.Media, err error) {
	b := css.SetMediaText(styleSheetID, rangeVal, text)
	return b.Do(doCSS.ctxWithExecutor)
}

// SetRuleSelector modifies the rule selector.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-setRuleSelector
//
// parameters:
//  - `styleSheetID`
//  - `range`
//  - `selector`
//
// returns:
//  - `retSelectorList`: The resulting selector list after modification.
func (doCSS CSS) SetRuleSelector(styleSheetID css.StyleSheetID, rangeVal *css.SourceRange, selector string) (retSelectorList *css.SelectorList, err error) {
	b := css.SetRuleSelector(styleSheetID, rangeVal, selector)
	return b.Do(doCSS.ctxWithExecutor)
}

// SetStyleSheetText sets the new stylesheet text.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-setStyleSheetText
//
// parameters:
//  - `styleSheetID`
//  - `text`
//
// returns:
//  - `retSourceMapURL`: URL of source map associated with script (if any).
func (doCSS CSS) SetStyleSheetText(styleSheetID css.StyleSheetID, text string) (retSourceMapURL string, err error) {
	b := css.SetStyleSheetText(styleSheetID, text)
	return b.Do(doCSS.ctxWithExecutor)
}

// SetStyleTexts applies specified style edits one after another in the given
// order.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-setStyleTexts
//
// parameters:
//  - `edits`
//
// returns:
//  - `retStyles`: The resulting styles after modification.
func (doCSS CSS) SetStyleTexts(edits []*css.StyleDeclarationEdit) (retStyles []*css.Style, err error) {
	b := css.SetStyleTexts(edits)
	return b.Do(doCSS.ctxWithExecutor)
}

// StartRuleUsageTracking enables the selector recording.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-startRuleUsageTracking
func (doCSS CSS) StartRuleUsageTracking() (err error) {
	b := css.StartRuleUsageTracking()
	return b.Do(doCSS.ctxWithExecutor)
}

// StopRuleUsageTracking stop tracking rule usage and return the list of
// rules that were used since last call to takeCoverageDelta (or since start of
// coverage instrumentation).
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-stopRuleUsageTracking
//
// returns:
//  - `retRuleUsage`
func (doCSS CSS) StopRuleUsageTracking() (retRuleUsage []*css.RuleUsage, err error) {
	b := css.StopRuleUsageTracking()
	return b.Do(doCSS.ctxWithExecutor)
}

// TakeCoverageDelta obtain list of rules that became used since last call to
// this method (or since start of coverage instrumentation).
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-takeCoverageDelta
//
// returns:
//  - `retCoverage`
//  - `retTimestamp`: Monotonically increasing time, in seconds.
func (doCSS CSS) TakeCoverageDelta() (retCoverage []*css.RuleUsage, retTimestamp float64, err error) {
	b := css.TakeCoverageDelta()
	return b.Do(doCSS.ctxWithExecutor)
}
