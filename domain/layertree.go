package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/dom"
	"github.com/chromedp/cdproto/layertree"
	"github.com/mailru/easyjson"
)

// LayerTree executes a cdproto command under LayerTree domain.
type LayerTree struct {
	ctxWithExecutor context.Context
}

// CompositingReasons provides the reasons why the given layer was
// composited.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/LayerTree#method-compositingReasons
//
// parameters:
//  - `layerID`: The id of the layer for which we want to get the reasons it was composited.
//
// returns:
//  - `retCompositingReasons`: A list of strings specifying reasons for the given layer to become composited.
func (doLayerTree LayerTree) CompositingReasons(layerID layertree.LayerID) (retCompositingReasons []string, err error) {
	b := layertree.CompositingReasons(layerID)
	return b.Do(doLayerTree.ctxWithExecutor)
}

// Disable disables compositing tree inspection.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/LayerTree#method-disable
func (doLayerTree LayerTree) Disable() (err error) {
	b := layertree.Disable()
	return b.Do(doLayerTree.ctxWithExecutor)
}

// Enable enables compositing tree inspection.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/LayerTree#method-enable
func (doLayerTree LayerTree) Enable() (err error) {
	b := layertree.Enable()
	return b.Do(doLayerTree.ctxWithExecutor)
}

// LoadSnapshot returns the snapshot identifier.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/LayerTree#method-loadSnapshot
//
// parameters:
//  - `tiles`: An array of tiles composing the snapshot.
//
// returns:
//  - `retSnapshotID`: The id of the snapshot.
func (doLayerTree LayerTree) LoadSnapshot(tiles []*layertree.PictureTile) (retSnapshotID layertree.SnapshotID, err error) {
	b := layertree.LoadSnapshot(tiles)
	return b.Do(doLayerTree.ctxWithExecutor)
}

// MakeSnapshot returns the layer snapshot identifier.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/LayerTree#method-makeSnapshot
//
// parameters:
//  - `layerID`: The id of the layer.
//
// returns:
//  - `retSnapshotID`: The id of the layer snapshot.
func (doLayerTree LayerTree) MakeSnapshot(layerID layertree.LayerID) (retSnapshotID layertree.SnapshotID, err error) {
	b := layertree.MakeSnapshot(layerID)
	return b.Do(doLayerTree.ctxWithExecutor)
}

// ProfileSnapshot [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/LayerTree#method-profileSnapshot
//
// parameters:
//  - `snapshotID`: The id of the layer snapshot.
//  - `minRepeatCount`: This can be nil. (Optional) The maximum number of times to replay the snapshot (1, if not specified).
//  - `minDuration`: This can be nil. (Optional) The minimum duration (in seconds) to replay the snapshot.
//  - `clipRect`: This can be nil. (Optional) The clip rectangle to apply when replaying the snapshot.
//
// returns:
//  - `retTimings`: The array of paint profiles, one per run.
func (doLayerTree LayerTree) ProfileSnapshot(snapshotID layertree.SnapshotID, minRepeatCount *int64, minDuration *float64, clipRect *dom.Rect) (retTimings []layertree.PaintProfile, err error) {
	b := layertree.ProfileSnapshot(snapshotID)
	if minRepeatCount != nil {
		b = b.WithMinRepeatCount(*minRepeatCount)
	}
	if minDuration != nil {
		b = b.WithMinDuration(*minDuration)
	}
	if clipRect != nil {
		b = b.WithClipRect(clipRect)
	}
	return b.Do(doLayerTree.ctxWithExecutor)
}

// ReleaseSnapshot releases layer snapshot captured by the back-end.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/LayerTree#method-releaseSnapshot
//
// parameters:
//  - `snapshotID`: The id of the layer snapshot.
func (doLayerTree LayerTree) ReleaseSnapshot(snapshotID layertree.SnapshotID) (err error) {
	b := layertree.ReleaseSnapshot(snapshotID)
	return b.Do(doLayerTree.ctxWithExecutor)
}

// ReplaySnapshot replays the layer snapshot and returns the resulting
// bitmap.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/LayerTree#method-replaySnapshot
//
// parameters:
//  - `snapshotID`: The id of the layer snapshot.
//  - `fromStep`: This can be nil. (Optional) The first step to replay from (replay from the very start if not specified).
//  - `toStep`: This can be nil. (Optional) The last step to replay to (replay till the end if not specified).
//  - `scale`: This can be nil. (Optional) The scale to apply while replaying (defaults to 1).
//
// returns:
//  - `retDataURL`: A data: URL for resulting image.
func (doLayerTree LayerTree) ReplaySnapshot(snapshotID layertree.SnapshotID, fromStep *int64, toStep *int64, scale *float64) (retDataURL string, err error) {
	b := layertree.ReplaySnapshot(snapshotID)
	if fromStep != nil {
		b = b.WithFromStep(*fromStep)
	}
	if toStep != nil {
		b = b.WithToStep(*toStep)
	}
	if scale != nil {
		b = b.WithScale(*scale)
	}
	return b.Do(doLayerTree.ctxWithExecutor)
}

// SnapshotCommandLog replays the layer snapshot and returns canvas log.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/LayerTree#method-snapshotCommandLog
//
// parameters:
//  - `snapshotID`: The id of the layer snapshot.
//
// returns:
//  - `retCommandLog`: The array of canvas function calls.
func (doLayerTree LayerTree) SnapshotCommandLog(snapshotID layertree.SnapshotID) (retCommandLog []easyjson.RawMessage, err error) {
	b := layertree.SnapshotCommandLog(snapshotID)
	return b.Do(doLayerTree.ctxWithExecutor)
}
