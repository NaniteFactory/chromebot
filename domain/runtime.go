package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/runtime"
)

// Runtime executes a cdproto command under Runtime domain.
type Runtime struct {
	ctxWithExecutor context.Context
}

// AwaitPromise add handler to promise with given promise object id.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-awaitPromise
//
// parameters:
//  - `promiseObjectID`: Identifier of the promise.
//  - `returnByValue`: This can be nil. (Optional) Whether the result is expected to be a JSON object that should be sent by value.
//  - `generatePreview`: This can be nil. (Optional) Whether preview should be generated for the result.
//
// returns:
//  - `retResult`: Promise result. Will contain rejected value if promise was rejected.
//  - `retExceptionDetails`: Exception details if stack strace is available.
func (doRuntime Runtime) AwaitPromise(promiseObjectID runtime.RemoteObjectID, returnByValue *bool, generatePreview *bool) (retResult *runtime.RemoteObject, retExceptionDetails *runtime.ExceptionDetails, err error) {
	b := runtime.AwaitPromise(promiseObjectID)
	if returnByValue != nil {
		b = b.WithReturnByValue(*returnByValue)
	}
	if generatePreview != nil {
		b = b.WithGeneratePreview(*generatePreview)
	}
	return b.Do(doRuntime.ctxWithExecutor)
}

// CallFunctionOn calls function with given declaration on the given object.
// Object group of the result is inherited from the target object.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-callFunctionOn
//
// parameters:
//  - `functionDeclaration`: Declaration of the function to call.
//  - `objectID`: This can be nil. (Optional) Identifier of the object to call function on. Either objectId or executionContextId should be specified.
//  - `arguments`: This can be nil. (Optional) Call arguments. All call arguments must belong to the same JavaScript world as the target object.
//  - `silent`: This can be nil. (Optional) In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
//  - `returnByValue`: This can be nil. (Optional) Whether the result is expected to be a JSON object which should be sent by value.
//  - `generatePreview`: This can be nil. (Optional) Whether preview should be generated for the result.
//  - `userGesture`: This can be nil. (Optional) Whether execution should be treated as initiated by user in the UI.
//  - `awaitPromise`: This can be nil. (Optional) Whether execution should await for resulting value and return once awaited promise is resolved.
//  - `executionContextID`: This can be nil. (Optional) Specifies execution context which global object will be used to call function on. Either executionContextId or objectId should be specified.
//  - `objectGroup`: This can be nil. (Optional) Symbolic group name that can be used to release multiple objects. If objectGroup is not specified and objectId is, objectGroup will be inherited from object.
//
// returns:
//  - `retResult`: Call result.
//  - `retExceptionDetails`: Exception details.
func (doRuntime Runtime) CallFunctionOn(functionDeclaration string, objectID *runtime.RemoteObjectID, arguments []*runtime.CallArgument, silent *bool, returnByValue *bool, generatePreview *bool, userGesture *bool, awaitPromise *bool, executionContextID *runtime.ExecutionContextID, objectGroup *string) (retResult *runtime.RemoteObject, retExceptionDetails *runtime.ExceptionDetails, err error) {
	b := runtime.CallFunctionOn(functionDeclaration)
	if objectID != nil {
		b = b.WithObjectID(*objectID)
	}
	if arguments != nil {
		b = b.WithArguments(arguments)
	}
	if silent != nil {
		b = b.WithSilent(*silent)
	}
	if returnByValue != nil {
		b = b.WithReturnByValue(*returnByValue)
	}
	if generatePreview != nil {
		b = b.WithGeneratePreview(*generatePreview)
	}
	if userGesture != nil {
		b = b.WithUserGesture(*userGesture)
	}
	if awaitPromise != nil {
		b = b.WithAwaitPromise(*awaitPromise)
	}
	if executionContextID != nil {
		b = b.WithExecutionContextID(*executionContextID)
	}
	if objectGroup != nil {
		b = b.WithObjectGroup(*objectGroup)
	}
	return b.Do(doRuntime.ctxWithExecutor)
}

// CompileScript compiles expression.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-compileScript
//
// parameters:
//  - `expression`: Expression to compile.
//  - `sourceURL`: Source url to be set for the script.
//  - `persistScript`: Specifies whether the compiled script should be persisted.
//  - `executionContextID`: This can be nil. (Optional) Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
//
// returns:
//  - `retScriptID`: Id of the script.
//  - `retExceptionDetails`: Exception details.
func (doRuntime Runtime) CompileScript(expression string, sourceURL string, persistScript bool, executionContextID *runtime.ExecutionContextID) (retScriptID runtime.ScriptID, retExceptionDetails *runtime.ExceptionDetails, err error) {
	b := runtime.CompileScript(expression, sourceURL, persistScript)
	if executionContextID != nil {
		b = b.WithExecutionContextID(*executionContextID)
	}
	return b.Do(doRuntime.ctxWithExecutor)
}

// Disable disables reporting of execution contexts creation.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-disable
func (doRuntime Runtime) Disable() (err error) {
	b := runtime.Disable()
	return b.Do(doRuntime.ctxWithExecutor)
}

// DiscardConsoleEntries discards collected exceptions and console API calls.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-discardConsoleEntries
func (doRuntime Runtime) DiscardConsoleEntries() (err error) {
	b := runtime.DiscardConsoleEntries()
	return b.Do(doRuntime.ctxWithExecutor)
}

// Enable enables reporting of execution contexts creation by means of
// executionContextCreated event. When the reporting gets enabled the event will
// be sent immediately for each existing execution context.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-enable
func (doRuntime Runtime) Enable() (err error) {
	b := runtime.Enable()
	return b.Do(doRuntime.ctxWithExecutor)
}

// Evaluate evaluates expression on global object.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-evaluate
//
// parameters:
//  - `expression`: Expression to evaluate.
//  - `objectGroup`: This can be nil. (Optional) Symbolic group name that can be used to release multiple objects.
//  - `includeCommandLineAPI`: This can be nil. (Optional) Determines whether Command Line API should be available during the evaluation.
//  - `silent`: This can be nil. (Optional) In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
//  - `contextID`: This can be nil. (Optional) Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
//  - `returnByValue`: This can be nil. (Optional) Whether the result is expected to be a JSON object that should be sent by value.
//  - `generatePreview`: This can be nil. (Optional) Whether preview should be generated for the result.
//  - `userGesture`: This can be nil. (Optional) Whether execution should be treated as initiated by user in the UI.
//  - `awaitPromise`: This can be nil. (Optional) Whether execution should await for resulting value and return once awaited promise is resolved.
//  - `throwOnSideEffect`: This can be nil. (Optional) Whether to throw an exception if side effect cannot be ruled out during evaluation. This implies disableBreaks below.
//  - `timeout`: This can be nil. (Optional) Terminate execution after timing out (number of milliseconds).
//  - `disableBreaks`: This can be nil. (Optional) Disable breakpoints during execution.
//  - `replMode`: This can be nil. (Optional) Reserved flag for future REPL mode support. Setting this flag has currently no effect.
//
// returns:
//  - `retResult`: Evaluation result.
//  - `retExceptionDetails`: Exception details.
func (doRuntime Runtime) Evaluate(expression string, objectGroup *string, includeCommandLineAPI *bool, silent *bool, contextID *runtime.ExecutionContextID, returnByValue *bool, generatePreview *bool, userGesture *bool, awaitPromise *bool, throwOnSideEffect *bool, timeout *runtime.TimeDelta, disableBreaks *bool, replMode *bool) (retResult *runtime.RemoteObject, retExceptionDetails *runtime.ExceptionDetails, err error) {
	b := runtime.Evaluate(expression)
	if objectGroup != nil {
		b = b.WithObjectGroup(*objectGroup)
	}
	if includeCommandLineAPI != nil {
		b = b.WithIncludeCommandLineAPI(*includeCommandLineAPI)
	}
	if silent != nil {
		b = b.WithSilent(*silent)
	}
	if contextID != nil {
		b = b.WithContextID(*contextID)
	}
	if returnByValue != nil {
		b = b.WithReturnByValue(*returnByValue)
	}
	if generatePreview != nil {
		b = b.WithGeneratePreview(*generatePreview)
	}
	if userGesture != nil {
		b = b.WithUserGesture(*userGesture)
	}
	if awaitPromise != nil {
		b = b.WithAwaitPromise(*awaitPromise)
	}
	if throwOnSideEffect != nil {
		b = b.WithThrowOnSideEffect(*throwOnSideEffect)
	}
	if timeout != nil {
		b = b.WithTimeout(*timeout)
	}
	if disableBreaks != nil {
		b = b.WithDisableBreaks(*disableBreaks)
	}
	if replMode != nil {
		b = b.WithReplMode(*replMode)
	}
	return b.Do(doRuntime.ctxWithExecutor)
}

// GetIsolateID returns the isolate id.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-getIsolateId
//
// returns:
//  - `retID`: The isolate id.
func (doRuntime Runtime) GetIsolateID() (retID string, err error) {
	b := runtime.GetIsolateID()
	return b.Do(doRuntime.ctxWithExecutor)
}

// GetHeapUsage returns the JavaScript heap usage. It is the total usage of
// the corresponding isolate not scoped to a particular Runtime.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-getHeapUsage
//
// returns:
//  - `retUsedSize`: Used heap size in bytes.
//  - `retTotalSize`: Allocated heap size in bytes.
func (doRuntime Runtime) GetHeapUsage() (retUsedSize float64, retTotalSize float64, err error) {
	b := runtime.GetHeapUsage()
	return b.Do(doRuntime.ctxWithExecutor)
}

// GetProperties returns properties of a given object. Object group of the
// result is inherited from the target object.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-getProperties
//
// parameters:
//  - `objectID`: Identifier of the object to return properties for.
//  - `ownProperties`: This can be nil. (Optional) If true, returns properties belonging only to the element itself, not to its prototype chain.
//  - `accessorPropertiesOnly`: This can be nil. (Optional) If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.
//  - `generatePreview`: This can be nil. (Optional) Whether preview should be generated for the results.
//
// returns:
//  - `retResult`: Object properties.
//  - `retInternalProperties`: Internal object properties (only of the element itself).
//  - `retPrivateProperties`: Object private properties.
//  - `retExceptionDetails`: Exception details.
func (doRuntime Runtime) GetProperties(objectID runtime.RemoteObjectID, ownProperties *bool, accessorPropertiesOnly *bool, generatePreview *bool) (retResult []*runtime.PropertyDescriptor, retInternalProperties []*runtime.InternalPropertyDescriptor, retPrivateProperties []*runtime.PrivatePropertyDescriptor, retExceptionDetails *runtime.ExceptionDetails, err error) {
	b := runtime.GetProperties(objectID)
	if ownProperties != nil {
		b = b.WithOwnProperties(*ownProperties)
	}
	if accessorPropertiesOnly != nil {
		b = b.WithAccessorPropertiesOnly(*accessorPropertiesOnly)
	}
	if generatePreview != nil {
		b = b.WithGeneratePreview(*generatePreview)
	}
	return b.Do(doRuntime.ctxWithExecutor)
}

// GlobalLexicalScopeNames returns all let, const and class variables from
// global scope.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-globalLexicalScopeNames
//
// parameters:
//  - `executionContextID`: This can be nil. (Optional) Specifies in which execution context to lookup global scope variables.
//
// returns:
//  - `retNames`
func (doRuntime Runtime) GlobalLexicalScopeNames(executionContextID *runtime.ExecutionContextID) (retNames []string, err error) {
	b := runtime.GlobalLexicalScopeNames()
	if executionContextID != nil {
		b = b.WithExecutionContextID(*executionContextID)
	}
	return b.Do(doRuntime.ctxWithExecutor)
}

// QueryObjects [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-queryObjects
//
// parameters:
//  - `prototypeObjectID`: Identifier of the prototype to return objects for.
//  - `objectGroup`: This can be nil. (Optional) Symbolic group name that can be used to release the results.
//
// returns:
//  - `retObjects`: Array with objects.
func (doRuntime Runtime) QueryObjects(prototypeObjectID runtime.RemoteObjectID, objectGroup *string) (retObjects *runtime.RemoteObject, err error) {
	b := runtime.QueryObjects(prototypeObjectID)
	if objectGroup != nil {
		b = b.WithObjectGroup(*objectGroup)
	}
	return b.Do(doRuntime.ctxWithExecutor)
}

// ReleaseObject releases remote object with given id.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-releaseObject
//
// parameters:
//  - `objectID`: Identifier of the object to release.
func (doRuntime Runtime) ReleaseObject(objectID runtime.RemoteObjectID) (err error) {
	b := runtime.ReleaseObject(objectID)
	return b.Do(doRuntime.ctxWithExecutor)
}

// ReleaseObjectGroup releases all remote objects that belong to a given
// group.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-releaseObjectGroup
//
// parameters:
//  - `objectGroup`: Symbolic object group name.
func (doRuntime Runtime) ReleaseObjectGroup(objectGroup string) (err error) {
	b := runtime.ReleaseObjectGroup(objectGroup)
	return b.Do(doRuntime.ctxWithExecutor)
}

// RunIfWaitingForDebugger tells inspected instance to run if it was waiting
// for debugger to attach.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-runIfWaitingForDebugger
func (doRuntime Runtime) RunIfWaitingForDebugger() (err error) {
	b := runtime.RunIfWaitingForDebugger()
	return b.Do(doRuntime.ctxWithExecutor)
}

// RunScript runs script with given id in a given context.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-runScript
//
// parameters:
//  - `scriptID`: Id of the script to run.
//  - `executionContextID`: This can be nil. (Optional) Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
//  - `objectGroup`: This can be nil. (Optional) Symbolic group name that can be used to release multiple objects.
//  - `silent`: This can be nil. (Optional) In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
//  - `includeCommandLineAPI`: This can be nil. (Optional) Determines whether Command Line API should be available during the evaluation.
//  - `returnByValue`: This can be nil. (Optional) Whether the result is expected to be a JSON object which should be sent by value.
//  - `generatePreview`: This can be nil. (Optional) Whether preview should be generated for the result.
//  - `awaitPromise`: This can be nil. (Optional) Whether execution should await for resulting value and return once awaited promise is resolved.
//
// returns:
//  - `retResult`: Run result.
//  - `retExceptionDetails`: Exception details.
func (doRuntime Runtime) RunScript(scriptID runtime.ScriptID, executionContextID *runtime.ExecutionContextID, objectGroup *string, silent *bool, includeCommandLineAPI *bool, returnByValue *bool, generatePreview *bool, awaitPromise *bool) (retResult *runtime.RemoteObject, retExceptionDetails *runtime.ExceptionDetails, err error) {
	b := runtime.RunScript(scriptID)
	if executionContextID != nil {
		b = b.WithExecutionContextID(*executionContextID)
	}
	if objectGroup != nil {
		b = b.WithObjectGroup(*objectGroup)
	}
	if silent != nil {
		b = b.WithSilent(*silent)
	}
	if includeCommandLineAPI != nil {
		b = b.WithIncludeCommandLineAPI(*includeCommandLineAPI)
	}
	if returnByValue != nil {
		b = b.WithReturnByValue(*returnByValue)
	}
	if generatePreview != nil {
		b = b.WithGeneratePreview(*generatePreview)
	}
	if awaitPromise != nil {
		b = b.WithAwaitPromise(*awaitPromise)
	}
	return b.Do(doRuntime.ctxWithExecutor)
}

// SetCustomObjectFormatterEnabled [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-setCustomObjectFormatterEnabled
//
// parameters:
//  - `enabled`
func (doRuntime Runtime) SetCustomObjectFormatterEnabled(enabled bool) (err error) {
	b := runtime.SetCustomObjectFormatterEnabled(enabled)
	return b.Do(doRuntime.ctxWithExecutor)
}

// SetMaxCallStackSizeToCapture [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-setMaxCallStackSizeToCapture
//
// parameters:
//  - `size`
func (doRuntime Runtime) SetMaxCallStackSizeToCapture(size int64) (err error) {
	b := runtime.SetMaxCallStackSizeToCapture(size)
	return b.Do(doRuntime.ctxWithExecutor)
}

// TerminateExecution terminate current or next JavaScript execution. Will
// cancel the termination when the outer-most script execution ends.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-terminateExecution
func (doRuntime Runtime) TerminateExecution() (err error) {
	b := runtime.TerminateExecution()
	return b.Do(doRuntime.ctxWithExecutor)
}

// AddBinding if executionContextId is empty, adds binding with the given
// name on the global objects of all inspected contexts, including those created
// later, bindings survive reloads. If executionContextId is specified, adds
// binding only on global object of given execution context. Binding function
// takes exactly one argument, this argument should be string, in case of any
// other input, function throws an exception. Each binding function call
// produces Runtime.bindingCalled notification.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-addBinding
//
// parameters:
//  - `name`
//  - `executionContextID`
func (doRuntime Runtime) AddBinding(name string, executionContextID *runtime.ExecutionContextID) (err error) {
	b := runtime.AddBinding(name)
	if executionContextID != nil {
		b = b.WithExecutionContextID(*executionContextID)
	}
	return b.Do(doRuntime.ctxWithExecutor)
}

// RemoveBinding this method does not remove binding function from global
// object but unsubscribes current runtime agent from Runtime.bindingCalled
// notifications.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-removeBinding
//
// parameters:
//  - `name`
func (doRuntime Runtime) RemoveBinding(name string) (err error) {
	b := runtime.RemoveBinding(name)
	return b.Do(doRuntime.ctxWithExecutor)
}
