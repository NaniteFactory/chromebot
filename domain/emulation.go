package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/cdp"
	"github.com/chromedp/cdproto/emulation"
	"github.com/chromedp/cdproto/page"
)

// Emulation executes a cdproto command under Emulation domain.
type Emulation struct {
	ctxWithExecutor context.Context
}

// CanEmulate tells whether emulation is supported.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-canEmulate
//
// returns:
//  - `retResult`: True if emulation is supported.
func (doEmulation Emulation) CanEmulate() (retResult bool, err error) {
	b := emulation.CanEmulate()
	return b.Do(doEmulation.ctxWithExecutor)
}

// ClearDeviceMetricsOverride clears the overridden device metrics.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-clearDeviceMetricsOverride
func (doEmulation Emulation) ClearDeviceMetricsOverride() (err error) {
	b := emulation.ClearDeviceMetricsOverride()
	return b.Do(doEmulation.ctxWithExecutor)
}

// ClearGeolocationOverride clears the overridden Geolocation Position and
// Error.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-clearGeolocationOverride
func (doEmulation Emulation) ClearGeolocationOverride() (err error) {
	b := emulation.ClearGeolocationOverride()
	return b.Do(doEmulation.ctxWithExecutor)
}

// ResetPageScaleFactor requests that page scale factor is reset to initial
// values.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-resetPageScaleFactor
func (doEmulation Emulation) ResetPageScaleFactor() (err error) {
	b := emulation.ResetPageScaleFactor()
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetFocusEmulationEnabled enables or disables simulating a focused and
// active page.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setFocusEmulationEnabled
//
// parameters:
//  - `enabled`: Whether to enable to disable focus emulation.
func (doEmulation Emulation) SetFocusEmulationEnabled(enabled bool) (err error) {
	b := emulation.SetFocusEmulationEnabled(enabled)
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetCPUThrottlingRate enables CPU throttling to emulate slow CPUs.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setCPUThrottlingRate
//
// parameters:
//  - `rate`: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
func (doEmulation Emulation) SetCPUThrottlingRate(rate float64) (err error) {
	b := emulation.SetCPUThrottlingRate(rate)
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetDefaultBackgroundColorOverride sets or clears an override of the
// default background color of the frame. This override is used if the content
// does not specify one.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setDefaultBackgroundColorOverride
//
// parameters:
//  - `color`: This can be nil. (Optional) RGBA of the default background color. If not specified, any existing override will be cleared.
func (doEmulation Emulation) SetDefaultBackgroundColorOverride(color *cdp.RGBA) (err error) {
	b := emulation.SetDefaultBackgroundColorOverride()
	if color != nil {
		b = b.WithColor(color)
	}
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetDeviceMetricsOverride overrides the values of device screen dimensions
// (window.screen.width, window.screen.height, window.innerWidth,
// window.innerHeight, and "device-width"/"device-height"-related CSS media
// query results).
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setDeviceMetricsOverride
//
// parameters:
//  - `width`: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
//  - `height`: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
//  - `deviceScaleFactor`: Overriding device scale factor value. 0 disables the override.
//  - `mobile`: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
//  - `scale`: This can be nil. (Optional) Scale to apply to resulting view image.
//  - `screenWidth`: This can be nil. (Optional) Overriding screen width value in pixels (minimum 0, maximum 10000000).
//  - `screenHeight`: This can be nil. (Optional) Overriding screen height value in pixels (minimum 0, maximum 10000000).
//  - `positionX`: This can be nil. (Optional) Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
//  - `positionY`: This can be nil. (Optional) Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
//  - `dontSetVisibleSize`: This can be nil. (Optional) Do not set visible view size, rely upon explicit setVisibleSize call.
//  - `screenOrientation`: This can be nil. (Optional) Screen orientation override.
//  - `viewport`: This can be nil. (Optional) If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
func (doEmulation Emulation) SetDeviceMetricsOverride(width int64, height int64, deviceScaleFactor float64, mobile bool, scale *float64, screenWidth *int64, screenHeight *int64, positionX *int64, positionY *int64, dontSetVisibleSize *bool, screenOrientation *emulation.ScreenOrientation, viewport *page.Viewport) (err error) {
	b := emulation.SetDeviceMetricsOverride(width, height, deviceScaleFactor, mobile)
	if scale != nil {
		b = b.WithScale(*scale)
	}
	if screenWidth != nil {
		b = b.WithScreenWidth(*screenWidth)
	}
	if screenHeight != nil {
		b = b.WithScreenHeight(*screenHeight)
	}
	if positionX != nil {
		b = b.WithPositionX(*positionX)
	}
	if positionY != nil {
		b = b.WithPositionY(*positionY)
	}
	if dontSetVisibleSize != nil {
		b = b.WithDontSetVisibleSize(*dontSetVisibleSize)
	}
	if screenOrientation != nil {
		b = b.WithScreenOrientation(screenOrientation)
	}
	if viewport != nil {
		b = b.WithViewport(viewport)
	}
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetScrollbarsHidden [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setScrollbarsHidden
//
// parameters:
//  - `hidden`: Whether scrollbars should be always hidden.
func (doEmulation Emulation) SetScrollbarsHidden(hidden bool) (err error) {
	b := emulation.SetScrollbarsHidden(hidden)
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetDocumentCookieDisabled [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setDocumentCookieDisabled
//
// parameters:
//  - `disabled`: Whether document.coookie API should be disabled.
func (doEmulation Emulation) SetDocumentCookieDisabled(disabled bool) (err error) {
	b := emulation.SetDocumentCookieDisabled(disabled)
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetEmitTouchEventsForMouse [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setEmitTouchEventsForMouse
//
// parameters:
//  - `enabled`: Whether touch emulation based on mouse input should be enabled.
//  - `configuration`: This can be nil. (Optional) Touch/gesture events configuration. Default: current platform.
func (doEmulation Emulation) SetEmitTouchEventsForMouse(enabled bool, configuration *emulation.SetEmitTouchEventsForMouseConfiguration) (err error) {
	b := emulation.SetEmitTouchEventsForMouse(enabled)
	if configuration != nil {
		b = b.WithConfiguration(*configuration)
	}
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetEmulatedMedia emulates the given media type or media feature for CSS
// media queries.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setEmulatedMedia
//
// parameters:
//  - `media`: This can be nil. (Optional) Media type to emulate. Empty string disables the override.
//  - `features`: This can be nil. (Optional) Media features to emulate.
func (doEmulation Emulation) SetEmulatedMedia(media *string, features []*emulation.MediaFeature) (err error) {
	b := emulation.SetEmulatedMedia()
	if media != nil {
		b = b.WithMedia(*media)
	}
	if features != nil {
		b = b.WithFeatures(features)
	}
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetGeolocationOverride overrides the Geolocation Position or Error.
// Omitting any of the parameters emulates position unavailable.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setGeolocationOverride
//
// parameters:
//  - `latitude`: This can be nil. (Optional) Mock latitude
//  - `longitude`: This can be nil. (Optional) Mock longitude
//  - `accuracy`: This can be nil. (Optional) Mock accuracy
func (doEmulation Emulation) SetGeolocationOverride(latitude *float64, longitude *float64, accuracy *float64) (err error) {
	b := emulation.SetGeolocationOverride()
	if latitude != nil {
		b = b.WithLatitude(*latitude)
	}
	if longitude != nil {
		b = b.WithLongitude(*longitude)
	}
	if accuracy != nil {
		b = b.WithAccuracy(*accuracy)
	}
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetPageScaleFactor sets a specified page scale factor.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setPageScaleFactor
//
// parameters:
//  - `pageScaleFactor`: Page scale factor.
func (doEmulation Emulation) SetPageScaleFactor(pageScaleFactor float64) (err error) {
	b := emulation.SetPageScaleFactor(pageScaleFactor)
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetScriptExecutionDisabled switches script execution in the page.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setScriptExecutionDisabled
//
// parameters:
//  - `value`: Whether script execution should be disabled in the page.
func (doEmulation Emulation) SetScriptExecutionDisabled(value bool) (err error) {
	b := emulation.SetScriptExecutionDisabled(value)
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetTouchEmulationEnabled enables touch on platforms which do not support
// them.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setTouchEmulationEnabled
//
// parameters:
//  - `enabled`: Whether the touch event emulation should be enabled.
//  - `maxTouchPoints`: This can be nil. (Optional) Maximum touch points supported. Defaults to one.
func (doEmulation Emulation) SetTouchEmulationEnabled(enabled bool, maxTouchPoints *int64) (err error) {
	b := emulation.SetTouchEmulationEnabled(enabled)
	if maxTouchPoints != nil {
		b = b.WithMaxTouchPoints(*maxTouchPoints)
	}
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetVirtualTimePolicy turns on virtual time for all frames (replacing
// real-time with a synthetic time source) and sets the current virtual time
// policy. Note this supersedes any previous time budget.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setVirtualTimePolicy
//
// parameters:
//  - `policy`
//  - `budget`: This can be nil. (Optional) If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
//  - `maxVirtualTimeTaskStarvationCount`: This can be nil. (Optional) If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
//  - `waitForNavigation`: This can be nil. (Optional) If set the virtual time policy change should be deferred until any frame starts navigating. Note any previous deferred policy change is superseded.
//  - `initialVirtualTime`: This can be nil. (Optional) If set, base::Time::Now will be overridden to initially return this value.
//
// returns:
//  - `retVirtualTimeTicksBase`: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
func (doEmulation Emulation) SetVirtualTimePolicy(policy emulation.VirtualTimePolicy, budget *float64, maxVirtualTimeTaskStarvationCount *int64, waitForNavigation *bool, initialVirtualTime *cdp.TimeSinceEpoch) (retVirtualTimeTicksBase float64, err error) {
	b := emulation.SetVirtualTimePolicy(policy)
	if budget != nil {
		b = b.WithBudget(*budget)
	}
	if maxVirtualTimeTaskStarvationCount != nil {
		b = b.WithMaxVirtualTimeTaskStarvationCount(*maxVirtualTimeTaskStarvationCount)
	}
	if waitForNavigation != nil {
		b = b.WithWaitForNavigation(*waitForNavigation)
	}
	if initialVirtualTime != nil {
		b = b.WithInitialVirtualTime(initialVirtualTime)
	}
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetTimezoneOverride overrides default host system timezone with the
// specified one.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setTimezoneOverride
//
// parameters:
//  - `timezoneID`: The timezone identifier. If empty, disables the override and restores default host system timezone.
func (doEmulation Emulation) SetTimezoneOverride(timezoneID string) (err error) {
	b := emulation.SetTimezoneOverride(timezoneID)
	return b.Do(doEmulation.ctxWithExecutor)
}

// SetUserAgentOverride allows overriding user agent with the given string.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setUserAgentOverride
//
// parameters:
//  - `userAgent`: User agent to use.
//  - `acceptLanguage`: This can be nil. (Optional) Browser langugage to emulate.
//  - `platform`: This can be nil. (Optional) The platform navigator.platform should return.
func (doEmulation Emulation) SetUserAgentOverride(userAgent string, acceptLanguage *string, platform *string) (err error) {
	b := emulation.SetUserAgentOverride(userAgent)
	if acceptLanguage != nil {
		b = b.WithAcceptLanguage(*acceptLanguage)
	}
	if platform != nil {
		b = b.WithPlatform(*platform)
	}
	return b.Do(doEmulation.ctxWithExecutor)
}
