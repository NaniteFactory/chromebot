package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/profiler"
)

// Profiler executes a cdproto command under Profiler domain.
type Profiler struct {
	ctxWithExecutor context.Context
}

// Disable [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-disable
func (doProfiler Profiler) Disable() (err error) {
	b := profiler.Disable()
	return b.Do(doProfiler.ctxWithExecutor)
}

// Enable [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-enable
func (doProfiler Profiler) Enable() (err error) {
	b := profiler.Enable()
	return b.Do(doProfiler.ctxWithExecutor)
}

// GetBestEffortCoverage collect coverage data for the current isolate. The
// coverage data may be incomplete due to garbage collection.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-getBestEffortCoverage
//
// returns:
//  - `retResult`: Coverage data for the current isolate.
func (doProfiler Profiler) GetBestEffortCoverage() (retResult []*profiler.ScriptCoverage, err error) {
	b := profiler.GetBestEffortCoverage()
	return b.Do(doProfiler.ctxWithExecutor)
}

// SetSamplingInterval changes CPU profiler sampling interval. Must be called
// before CPU profiles recording started.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-setSamplingInterval
//
// parameters:
//  - `interval`: New sampling interval in microseconds.
func (doProfiler Profiler) SetSamplingInterval(interval int64) (err error) {
	b := profiler.SetSamplingInterval(interval)
	return b.Do(doProfiler.ctxWithExecutor)
}

// Start [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-start
func (doProfiler Profiler) Start() (err error) {
	b := profiler.Start()
	return b.Do(doProfiler.ctxWithExecutor)
}

// StartPreciseCoverage enable precise code coverage. Coverage data for
// JavaScript executed before enabling precise code coverage may be incomplete.
// Enabling prevents running optimized code and resets execution counters.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-startPreciseCoverage
//
// parameters:
//  - `callCount`: This can be nil. (Optional) Collect accurate call counts beyond simple 'covered' or 'not covered'.
//  - `detailed`: This can be nil. (Optional) Collect block-based coverage.
//
// returns:
//  - `retTimestamp`: Monotonically increasing time (in seconds) when the coverage update was taken in the backend.
func (doProfiler Profiler) StartPreciseCoverage(callCount *bool, detailed *bool) (retTimestamp float64, err error) {
	b := profiler.StartPreciseCoverage()
	if callCount != nil {
		b = b.WithCallCount(*callCount)
	}
	if detailed != nil {
		b = b.WithDetailed(*detailed)
	}
	return b.Do(doProfiler.ctxWithExecutor)
}

// StartTypeProfile enable type profile.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-startTypeProfile
func (doProfiler Profiler) StartTypeProfile() (err error) {
	b := profiler.StartTypeProfile()
	return b.Do(doProfiler.ctxWithExecutor)
}

// Stop [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-stop
//
// returns:
//  - `retProfile`: Recorded profile.
func (doProfiler Profiler) Stop() (retProfile *profiler.Profile, err error) {
	b := profiler.Stop()
	return b.Do(doProfiler.ctxWithExecutor)
}

// StopPreciseCoverage disable precise code coverage. Disabling releases
// unnecessary execution count records and allows executing optimized code.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-stopPreciseCoverage
func (doProfiler Profiler) StopPreciseCoverage() (err error) {
	b := profiler.StopPreciseCoverage()
	return b.Do(doProfiler.ctxWithExecutor)
}

// StopTypeProfile disable type profile. Disabling releases type profile data
// collected so far.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-stopTypeProfile
func (doProfiler Profiler) StopTypeProfile() (err error) {
	b := profiler.StopTypeProfile()
	return b.Do(doProfiler.ctxWithExecutor)
}

// TakePreciseCoverage collect coverage data for the current isolate, and
// resets execution counters. Precise code coverage needs to have started.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-takePreciseCoverage
//
// returns:
//  - `retResult`: Coverage data for the current isolate.
//  - `retTimestamp`: Monotonically increasing time (in seconds) when the coverage update was taken in the backend.
func (doProfiler Profiler) TakePreciseCoverage() (retResult []*profiler.ScriptCoverage, retTimestamp float64, err error) {
	b := profiler.TakePreciseCoverage()
	return b.Do(doProfiler.ctxWithExecutor)
}

// TakeTypeProfile collect type profile.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-takeTypeProfile
//
// returns:
//  - `retResult`: Type profile for all scripts since startTypeProfile() was turned on.
func (doProfiler Profiler) TakeTypeProfile() (retResult []*profiler.ScriptTypeProfile, err error) {
	b := profiler.TakeTypeProfile()
	return b.Do(doProfiler.ctxWithExecutor)
}

// EnableRuntimeCallStats enable run time call stats collection.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-enableRuntimeCallStats
func (doProfiler Profiler) EnableRuntimeCallStats() (err error) {
	b := profiler.EnableRuntimeCallStats()
	return b.Do(doProfiler.ctxWithExecutor)
}

// DisableRuntimeCallStats disable run time call stats collection.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-disableRuntimeCallStats
func (doProfiler Profiler) DisableRuntimeCallStats() (err error) {
	b := profiler.DisableRuntimeCallStats()
	return b.Do(doProfiler.ctxWithExecutor)
}

// GetRuntimeCallStats retrieve run time call stats.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-getRuntimeCallStats
//
// returns:
//  - `retResult`: Collected counter information.
func (doProfiler Profiler) GetRuntimeCallStats() (retResult []*profiler.CounterInfo, err error) {
	b := profiler.GetRuntimeCallStats()
	return b.Do(doProfiler.ctxWithExecutor)
}
