package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/accessibility"
	"github.com/chromedp/cdproto/cdp"
	"github.com/chromedp/cdproto/runtime"
)

// Accessibility executes a cdproto command under Accessibility domain.
type Accessibility struct {
	ctxWithExecutor context.Context
}

// Disable disables the accessibility domain.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Accessibility#method-disable
func (doAccessibility Accessibility) Disable() (err error) {
	b := accessibility.Disable()
	return b.Do(doAccessibility.ctxWithExecutor)
}

// Enable enables the accessibility domain which causes AXNodeIds to remain
// consistent between method calls. This turns on accessibility for the page,
// which can impact performance until accessibility is disabled.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Accessibility#method-enable
func (doAccessibility Accessibility) Enable() (err error) {
	b := accessibility.Enable()
	return b.Do(doAccessibility.ctxWithExecutor)
}

// GetPartialAXTree fetches the accessibility node and partial accessibility
// tree for this DOM node, if it exists.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Accessibility#method-getPartialAXTree
//
// parameters:
//  - `nodeID`: This can be nil. (Optional) Identifier of the node to get the partial accessibility tree for.
//  - `backendNodeID`: This can be nil. (Optional) Identifier of the backend node to get the partial accessibility tree for.
//  - `objectID`: This can be nil. (Optional) JavaScript object id of the node wrapper to get the partial accessibility tree for.
//  - `fetchRelatives`: This can be nil. (Optional) Whether to fetch this nodes ancestors, siblings and children. Defaults to true.
//
// returns:
//  - `retNodes`: The Accessibility.AXNode for this DOM node, if it exists, plus its ancestors, siblings and children, if requested.
func (doAccessibility Accessibility) GetPartialAXTree(nodeID *cdp.NodeID, backendNodeID *cdp.BackendNodeID, objectID *runtime.RemoteObjectID, fetchRelatives *bool) (retNodes []*accessibility.Node, err error) {
	b := accessibility.GetPartialAXTree()
	if nodeID != nil {
		b = b.WithNodeID(*nodeID)
	}
	if backendNodeID != nil {
		b = b.WithBackendNodeID(*backendNodeID)
	}
	if objectID != nil {
		b = b.WithObjectID(*objectID)
	}
	if fetchRelatives != nil {
		b = b.WithFetchRelatives(*fetchRelatives)
	}
	return b.Do(doAccessibility.ctxWithExecutor)
}

// GetFullAXTree fetches the entire accessibility tree.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Accessibility#method-getFullAXTree
//
// returns:
//  - `retNodes`
func (doAccessibility Accessibility) GetFullAXTree() (retNodes []*accessibility.Node, err error) {
	b := accessibility.GetFullAXTree()
	return b.Do(doAccessibility.ctxWithExecutor)
}
