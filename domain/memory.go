package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/memory"
)

// Memory executes a cdproto command under Memory domain.
type Memory struct {
	ctxWithExecutor context.Context
}

// GetDOMCounters [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Memory#method-getDOMCounters
//
// returns:
//  - `retDocuments`
//  - `retNodes`
//  - `retJsEventListeners`
func (doMemory Memory) GetDOMCounters() (retDocuments int64, retNodes int64, retJsEventListeners int64, err error) {
	b := memory.GetDOMCounters()
	return b.Do(doMemory.ctxWithExecutor)
}

// PrepareForLeakDetection [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Memory#method-prepareForLeakDetection
func (doMemory Memory) PrepareForLeakDetection() (err error) {
	b := memory.PrepareForLeakDetection()
	return b.Do(doMemory.ctxWithExecutor)
}

// ForciblyPurgeJavaScriptMemory simulate OomIntervention by purging V8
// memory.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Memory#method-forciblyPurgeJavaScriptMemory
func (doMemory Memory) ForciblyPurgeJavaScriptMemory() (err error) {
	b := memory.ForciblyPurgeJavaScriptMemory()
	return b.Do(doMemory.ctxWithExecutor)
}

// SetPressureNotificationsSuppressed enable/disable suppressing memory
// pressure notifications in all processes.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Memory#method-setPressureNotificationsSuppressed
//
// parameters:
//  - `suppressed`: If true, memory pressure notifications will be suppressed.
func (doMemory Memory) SetPressureNotificationsSuppressed(suppressed bool) (err error) {
	b := memory.SetPressureNotificationsSuppressed(suppressed)
	return b.Do(doMemory.ctxWithExecutor)
}

// SimulatePressureNotification simulate a memory pressure notification in
// all processes.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Memory#method-simulatePressureNotification
//
// parameters:
//  - `level`: Memory pressure level of the notification.
func (doMemory Memory) SimulatePressureNotification(level memory.PressureLevel) (err error) {
	b := memory.SimulatePressureNotification(level)
	return b.Do(doMemory.ctxWithExecutor)
}

// StartSampling start collecting native memory profile.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Memory#method-startSampling
//
// parameters:
//  - `samplingInterval`: This can be nil. (Optional) Average number of bytes between samples.
//  - `suppressRandomness`: This can be nil. (Optional) Do not randomize intervals between samples.
func (doMemory Memory) StartSampling(samplingInterval *int64, suppressRandomness *bool) (err error) {
	b := memory.StartSampling()
	if samplingInterval != nil {
		b = b.WithSamplingInterval(*samplingInterval)
	}
	if suppressRandomness != nil {
		b = b.WithSuppressRandomness(*suppressRandomness)
	}
	return b.Do(doMemory.ctxWithExecutor)
}

// StopSampling stop collecting native memory profile.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Memory#method-stopSampling
func (doMemory Memory) StopSampling() (err error) {
	b := memory.StopSampling()
	return b.Do(doMemory.ctxWithExecutor)
}

// GetAllTimeSamplingProfile retrieve native memory allocations profile
// collected since renderer process startup.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Memory#method-getAllTimeSamplingProfile
//
// returns:
//  - `retProfile`
func (doMemory Memory) GetAllTimeSamplingProfile() (retProfile *memory.SamplingProfile, err error) {
	b := memory.GetAllTimeSamplingProfile()
	return b.Do(doMemory.ctxWithExecutor)
}

// GetBrowserSamplingProfile retrieve native memory allocations profile
// collected since browser process startup.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Memory#method-getBrowserSamplingProfile
//
// returns:
//  - `retProfile`
func (doMemory Memory) GetBrowserSamplingProfile() (retProfile *memory.SamplingProfile, err error) {
	b := memory.GetBrowserSamplingProfile()
	return b.Do(doMemory.ctxWithExecutor)
}

// GetSamplingProfile retrieve native memory allocations profile collected
// since last startSampling call.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Memory#method-getSamplingProfile
//
// returns:
//  - `retProfile`
func (doMemory Memory) GetSamplingProfile() (retProfile *memory.SamplingProfile, err error) {
	b := memory.GetSamplingProfile()
	return b.Do(doMemory.ctxWithExecutor)
}
