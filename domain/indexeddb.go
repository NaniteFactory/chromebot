package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/indexeddb"
)

// IndexedDB executes a cdproto command under IndexedDB domain.
type IndexedDB struct {
	ctxWithExecutor context.Context
}

// ClearObjectStore clears all entries from an object store.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/IndexedDB#method-clearObjectStore
//
// parameters:
//  - `securityOrigin`: Security origin.
//  - `databaseName`: Database name.
//  - `objectStoreName`: Object store name.
func (doIndexedDB IndexedDB) ClearObjectStore(securityOrigin string, databaseName string, objectStoreName string) (err error) {
	b := indexeddb.ClearObjectStore(securityOrigin, databaseName, objectStoreName)
	return b.Do(doIndexedDB.ctxWithExecutor)
}

// DeleteDatabase deletes a database.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/IndexedDB#method-deleteDatabase
//
// parameters:
//  - `securityOrigin`: Security origin.
//  - `databaseName`: Database name.
func (doIndexedDB IndexedDB) DeleteDatabase(securityOrigin string, databaseName string) (err error) {
	b := indexeddb.DeleteDatabase(securityOrigin, databaseName)
	return b.Do(doIndexedDB.ctxWithExecutor)
}

// DeleteObjectStoreEntries delete a range of entries from an object store.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/IndexedDB#method-deleteObjectStoreEntries
//
// parameters:
//  - `securityOrigin`
//  - `databaseName`
//  - `objectStoreName`
//  - `keyRange`: Range of entry keys to delete
func (doIndexedDB IndexedDB) DeleteObjectStoreEntries(securityOrigin string, databaseName string, objectStoreName string, keyRange *indexeddb.KeyRange) (err error) {
	b := indexeddb.DeleteObjectStoreEntries(securityOrigin, databaseName, objectStoreName, keyRange)
	return b.Do(doIndexedDB.ctxWithExecutor)
}

// Disable disables events from backend.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/IndexedDB#method-disable
func (doIndexedDB IndexedDB) Disable() (err error) {
	b := indexeddb.Disable()
	return b.Do(doIndexedDB.ctxWithExecutor)
}

// Enable enables events from backend.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/IndexedDB#method-enable
func (doIndexedDB IndexedDB) Enable() (err error) {
	b := indexeddb.Enable()
	return b.Do(doIndexedDB.ctxWithExecutor)
}

// RequestData requests data from object store or index.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/IndexedDB#method-requestData
//
// parameters:
//  - `securityOrigin`: Security origin.
//  - `databaseName`: Database name.
//  - `objectStoreName`: Object store name.
//  - `indexName`: Index name, empty string for object store data requests.
//  - `skipCount`: Number of records to skip.
//  - `pageSize`: Number of records to fetch.
//  - `keyRange`: This can be nil. (Optional) Key range.
//
// returns:
//  - `retObjectStoreDataEntries`: Array of object store data entries.
//  - `retHasMore`: If true, there are more entries to fetch in the given range.
func (doIndexedDB IndexedDB) RequestData(securityOrigin string, databaseName string, objectStoreName string, indexName string, skipCount int64, pageSize int64, keyRange *indexeddb.KeyRange) (retObjectStoreDataEntries []*indexeddb.DataEntry, retHasMore bool, err error) {
	b := indexeddb.RequestData(securityOrigin, databaseName, objectStoreName, indexName, skipCount, pageSize)
	if keyRange != nil {
		b = b.WithKeyRange(keyRange)
	}
	return b.Do(doIndexedDB.ctxWithExecutor)
}

// GetMetadata gets metadata of an object store.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/IndexedDB#method-getMetadata
//
// parameters:
//  - `securityOrigin`: Security origin.
//  - `databaseName`: Database name.
//  - `objectStoreName`: Object store name.
//
// returns:
//  - `retEntriesCount`: the entries count
//  - `retKeyGeneratorValue`: the current value of key generator, to become the next inserted key into the object store. Valid if objectStore.autoIncrement is true.
func (doIndexedDB IndexedDB) GetMetadata(securityOrigin string, databaseName string, objectStoreName string) (retEntriesCount float64, retKeyGeneratorValue float64, err error) {
	b := indexeddb.GetMetadata(securityOrigin, databaseName, objectStoreName)
	return b.Do(doIndexedDB.ctxWithExecutor)
}

// RequestDatabase requests database with given name in given frame.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/IndexedDB#method-requestDatabase
//
// parameters:
//  - `securityOrigin`: Security origin.
//  - `databaseName`: Database name.
//
// returns:
//  - `retDatabaseWithObjectStores`: Database with an array of object stores.
func (doIndexedDB IndexedDB) RequestDatabase(securityOrigin string, databaseName string) (retDatabaseWithObjectStores *indexeddb.DatabaseWithObjectStores, err error) {
	b := indexeddb.RequestDatabase(securityOrigin, databaseName)
	return b.Do(doIndexedDB.ctxWithExecutor)
}

// RequestDatabaseNames requests database names for given security origin.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/IndexedDB#method-requestDatabaseNames
//
// parameters:
//  - `securityOrigin`: Security origin.
//
// returns:
//  - `retDatabaseNames`: Database names for origin.
func (doIndexedDB IndexedDB) RequestDatabaseNames(securityOrigin string) (retDatabaseNames []string, err error) {
	b := indexeddb.RequestDatabaseNames(securityOrigin)
	return b.Do(doIndexedDB.ctxWithExecutor)
}
