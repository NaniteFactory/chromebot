package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/headlessexperimental"
)

// HeadlessExperimental executes a cdproto command under HeadlessExperimental domain.
type HeadlessExperimental struct {
	ctxWithExecutor context.Context
}

// BeginFrame sends a BeginFrame to the target and returns when the frame was
// completed. Optionally captures a screenshot from the resulting frame.
// Requires that the target was created with enabled BeginFrameControl. Designed
// for use with --run-all-compositor-stages-before-draw, see also
// https://goo.gl/3zHXhB for more background.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeadlessExperimental#method-beginFrame
//
// parameters:
//  - `frameTimeTicks`: This can be nil. (Optional) Timestamp of this BeginFrame in Renderer TimeTicks (milliseconds of uptime). If not set, the current time will be used.
//  - `interval`: This can be nil. (Optional) The interval between BeginFrames that is reported to the compositor, in milliseconds. Defaults to a 60 frames/second interval, i.e. about 16.666 milliseconds.
//  - `noDisplayUpdates`: This can be nil. (Optional) Whether updates should not be committed and drawn onto the display. False by default. If true, only side effects of the BeginFrame will be run, such as layout and animations, but any visual updates may not be visible on the display or in screenshots.
//  - `screenshot`: This can be nil. (Optional) If set, a screenshot of the frame will be captured and returned in the response. Otherwise, no screenshot will be captured. Note that capturing a screenshot can fail, for example, during renderer initialization. In such a case, no screenshot data will be returned.
//
// returns:
//  - `retHasDamage`: Whether the BeginFrame resulted in damage and, thus, a new frame was committed to the display. Reported for diagnostic uses, may be removed in the future.
//  - `retScreenshotData`: Base64-encoded image data of the screenshot, if one was requested and successfully taken.
func (doHeadlessExperimental HeadlessExperimental) BeginFrame(frameTimeTicks *float64, interval *float64, noDisplayUpdates *bool, screenshot *headlessexperimental.ScreenshotParams) (retHasDamage bool, retScreenshotData []byte, err error) {
	b := headlessexperimental.BeginFrame()
	if frameTimeTicks != nil {
		b = b.WithFrameTimeTicks(*frameTimeTicks)
	}
	if interval != nil {
		b = b.WithInterval(*interval)
	}
	if noDisplayUpdates != nil {
		b = b.WithNoDisplayUpdates(*noDisplayUpdates)
	}
	if screenshot != nil {
		b = b.WithScreenshot(screenshot)
	}
	return b.Do(doHeadlessExperimental.ctxWithExecutor)
}

// Disable disables headless events for the target.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeadlessExperimental#method-disable
func (doHeadlessExperimental HeadlessExperimental) Disable() (err error) {
	b := headlessexperimental.Disable()
	return b.Do(doHeadlessExperimental.ctxWithExecutor)
}

// Enable enables headless events for the target.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeadlessExperimental#method-enable
func (doHeadlessExperimental HeadlessExperimental) Enable() (err error) {
	b := headlessexperimental.Enable()
	return b.Do(doHeadlessExperimental.ctxWithExecutor)
}
