package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/cachestorage"
)

// CacheStorage executes a cdproto command under CacheStorage domain.
type CacheStorage struct {
	ctxWithExecutor context.Context
}

// DeleteCache deletes a cache.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CacheStorage#method-deleteCache
//
// parameters:
//  - `cacheID`: Id of cache for deletion.
func (doCacheStorage CacheStorage) DeleteCache(cacheID cachestorage.CacheID) (err error) {
	b := cachestorage.DeleteCache(cacheID)
	return b.Do(doCacheStorage.ctxWithExecutor)
}

// DeleteEntry deletes a cache entry.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CacheStorage#method-deleteEntry
//
// parameters:
//  - `cacheID`: Id of cache where the entry will be deleted.
//  - `request`: URL spec of the request.
func (doCacheStorage CacheStorage) DeleteEntry(cacheID cachestorage.CacheID, request string) (err error) {
	b := cachestorage.DeleteEntry(cacheID, request)
	return b.Do(doCacheStorage.ctxWithExecutor)
}

// RequestCacheNames requests cache names.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CacheStorage#method-requestCacheNames
//
// parameters:
//  - `securityOrigin`: Security origin.
//
// returns:
//  - `retCaches`: Caches for the security origin.
func (doCacheStorage CacheStorage) RequestCacheNames(securityOrigin string) (retCaches []*cachestorage.Cache, err error) {
	b := cachestorage.RequestCacheNames(securityOrigin)
	return b.Do(doCacheStorage.ctxWithExecutor)
}

// RequestCachedResponse fetches cache entry.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CacheStorage#method-requestCachedResponse
//
// parameters:
//  - `cacheID`: Id of cache that contains the entry.
//  - `requestURL`: URL spec of the request.
//  - `requestHeaders`: headers of the request.
//
// returns:
//  - `retResponse`: Response read from the cache.
func (doCacheStorage CacheStorage) RequestCachedResponse(cacheID cachestorage.CacheID, requestURL string, requestHeaders []*cachestorage.Header) (retResponse *cachestorage.CachedResponse, err error) {
	b := cachestorage.RequestCachedResponse(cacheID, requestURL, requestHeaders)
	return b.Do(doCacheStorage.ctxWithExecutor)
}

// RequestEntries requests data from cache.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/CacheStorage#method-requestEntries
//
// parameters:
//  - `cacheID`: ID of cache to get entries from.
//  - `skipCount`: This can be nil. (Optional) Number of records to skip.
//  - `pageSize`: This can be nil. (Optional) Number of records to fetch.
//  - `pathFilter`: This can be nil. (Optional) If present, only return the entries containing this substring in the path
//
// returns:
//  - `retCacheDataEntries`: Array of object store data entries.
//  - `retReturnCount`: Count of returned entries from this storage. If pathFilter is empty, it is the count of all entries from this storage.
func (doCacheStorage CacheStorage) RequestEntries(cacheID cachestorage.CacheID, skipCount *int64, pageSize *int64, pathFilter *string) (retCacheDataEntries []*cachestorage.DataEntry, retReturnCount float64, err error) {
	b := cachestorage.RequestEntries(cacheID)
	if pathFilter != nil {
		b = b.WithPathFilter(*pathFilter)
	}
	return b.Do(doCacheStorage.ctxWithExecutor)
}
