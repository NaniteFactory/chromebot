package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/applicationcache"
	"github.com/chromedp/cdproto/cdp"
)

// ApplicationCache executes a cdproto command under ApplicationCache domain.
type ApplicationCache struct {
	ctxWithExecutor context.Context
}

// Enable enables application cache domain notifications.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/ApplicationCache#method-enable
func (doApplicationCache ApplicationCache) Enable() (err error) {
	b := applicationcache.Enable()
	return b.Do(doApplicationCache.ctxWithExecutor)
}

// GetApplicationCacheForFrame returns relevant application cache data for
// the document in given frame.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/ApplicationCache#method-getApplicationCacheForFrame
//
// parameters:
//  - `frameID`: Identifier of the frame containing document whose application cache is retrieved.
//
// returns:
//  - `retApplicationCache`: Relevant application cache data for the document in given frame.
func (doApplicationCache ApplicationCache) GetApplicationCacheForFrame(frameID cdp.FrameID) (retApplicationCache *applicationcache.ApplicationCache, err error) {
	b := applicationcache.GetApplicationCacheForFrame(frameID)
	return b.Do(doApplicationCache.ctxWithExecutor)
}

// GetFramesWithManifests returns array of frame identifiers with manifest
// urls for each frame containing a document associated with some application
// cache.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/ApplicationCache#method-getFramesWithManifests
//
// returns:
//  - `retFrameIds`: Array of frame identifiers with manifest urls for each frame containing a document associated with some application cache.
func (doApplicationCache ApplicationCache) GetFramesWithManifests() (retFrameIds []*applicationcache.FrameWithManifest, err error) {
	b := applicationcache.GetFramesWithManifests()
	return b.Do(doApplicationCache.ctxWithExecutor)
}

// GetManifestForFrame returns manifest URL for document in the given frame.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/ApplicationCache#method-getManifestForFrame
//
// parameters:
//  - `frameID`: Identifier of the frame containing document whose manifest is retrieved.
//
// returns:
//  - `retManifestURL`: Manifest URL for document in the given frame.
func (doApplicationCache ApplicationCache) GetManifestForFrame(frameID cdp.FrameID) (retManifestURL string, err error) {
	b := applicationcache.GetManifestForFrame(frameID)
	return b.Do(doApplicationCache.ctxWithExecutor)
}
