package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/heapprofiler"
	"github.com/chromedp/cdproto/runtime"
)

// HeapProfiler executes a cdproto command under HeapProfiler domain.
type HeapProfiler struct {
	ctxWithExecutor context.Context
}

// AddInspectedHeapObject enables console to refer to the node with given id
// via $x (see Command Line API for more details $x functions).
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeapProfiler#method-addInspectedHeapObject
//
// parameters:
//  - `heapObjectID`: Heap snapshot object id to be accessible by means of $x command line API.
func (doHeapProfiler HeapProfiler) AddInspectedHeapObject(heapObjectID heapprofiler.HeapSnapshotObjectID) (err error) {
	b := heapprofiler.AddInspectedHeapObject(heapObjectID)
	return b.Do(doHeapProfiler.ctxWithExecutor)
}

// CollectGarbage [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeapProfiler#method-collectGarbage
func (doHeapProfiler HeapProfiler) CollectGarbage() (err error) {
	b := heapprofiler.CollectGarbage()
	return b.Do(doHeapProfiler.ctxWithExecutor)
}

// Disable [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeapProfiler#method-disable
func (doHeapProfiler HeapProfiler) Disable() (err error) {
	b := heapprofiler.Disable()
	return b.Do(doHeapProfiler.ctxWithExecutor)
}

// Enable [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeapProfiler#method-enable
func (doHeapProfiler HeapProfiler) Enable() (err error) {
	b := heapprofiler.Enable()
	return b.Do(doHeapProfiler.ctxWithExecutor)
}

// GetHeapObjectID [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeapProfiler#method-getHeapObjectId
//
// parameters:
//  - `objectID`: Identifier of the object to get heap object id for.
//
// returns:
//  - `retHeapSnapshotObjectID`: Id of the heap snapshot object corresponding to the passed remote object id.
func (doHeapProfiler HeapProfiler) GetHeapObjectID(objectID runtime.RemoteObjectID) (retHeapSnapshotObjectID heapprofiler.HeapSnapshotObjectID, err error) {
	b := heapprofiler.GetHeapObjectID(objectID)
	return b.Do(doHeapProfiler.ctxWithExecutor)
}

// GetObjectByHeapObjectID [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeapProfiler#method-getObjectByHeapObjectId
//
// parameters:
//  - `objectID`
//  - `objectGroup`: This can be nil. (Optional) Symbolic group name that can be used to release multiple objects.
//
// returns:
//  - `retResult`: Evaluation result.
func (doHeapProfiler HeapProfiler) GetObjectByHeapObjectID(objectID heapprofiler.HeapSnapshotObjectID, objectGroup *string) (retResult *runtime.RemoteObject, err error) {
	b := heapprofiler.GetObjectByHeapObjectID(objectID)
	if objectGroup != nil {
		b = b.WithObjectGroup(*objectGroup)
	}
	return b.Do(doHeapProfiler.ctxWithExecutor)
}

// GetSamplingProfile [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeapProfiler#method-getSamplingProfile
//
// returns:
//  - `retProfile`: Return the sampling profile being collected.
func (doHeapProfiler HeapProfiler) GetSamplingProfile() (retProfile *heapprofiler.SamplingHeapProfile, err error) {
	b := heapprofiler.GetSamplingProfile()
	return b.Do(doHeapProfiler.ctxWithExecutor)
}

// StartSampling [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeapProfiler#method-startSampling
//
// parameters:
//  - `samplingInterval`: This can be nil. (Optional) Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.
func (doHeapProfiler HeapProfiler) StartSampling(samplingInterval *float64) (err error) {
	b := heapprofiler.StartSampling()
	if samplingInterval != nil {
		b = b.WithSamplingInterval(*samplingInterval)
	}
	return b.Do(doHeapProfiler.ctxWithExecutor)
}

// StartTrackingHeapObjects [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeapProfiler#method-startTrackingHeapObjects
//
// parameters:
//  - `trackAllocations`
func (doHeapProfiler HeapProfiler) StartTrackingHeapObjects(trackAllocations *bool) (err error) {
	b := heapprofiler.StartTrackingHeapObjects()
	if trackAllocations != nil {
		b = b.WithTrackAllocations(*trackAllocations)
	}
	return b.Do(doHeapProfiler.ctxWithExecutor)
}

// StopSampling [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeapProfiler#method-stopSampling
//
// returns:
//  - `retProfile`: Recorded sampling heap profile.
func (doHeapProfiler HeapProfiler) StopSampling() (retProfile *heapprofiler.SamplingHeapProfile, err error) {
	b := heapprofiler.StopSampling()
	return b.Do(doHeapProfiler.ctxWithExecutor)
}

// StopTrackingHeapObjects [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeapProfiler#method-stopTrackingHeapObjects
//
// parameters:
//  - `reportProgress`: This can be nil. (Optional) If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.
func (doHeapProfiler HeapProfiler) StopTrackingHeapObjects(reportProgress *bool) (err error) {
	b := heapprofiler.StopTrackingHeapObjects()
	if reportProgress != nil {
		b = b.WithReportProgress(*reportProgress)
	}
	return b.Do(doHeapProfiler.ctxWithExecutor)
}

// TakeHeapSnapshot [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/HeapProfiler#method-takeHeapSnapshot
//
// parameters:
//  - `reportProgress`: This can be nil. (Optional) If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.
func (doHeapProfiler HeapProfiler) TakeHeapSnapshot(reportProgress *bool) (err error) {
	b := heapprofiler.TakeHeapSnapshot()
	if reportProgress != nil {
		b = b.WithReportProgress(*reportProgress)
	}
	return b.Do(doHeapProfiler.ctxWithExecutor)
}
