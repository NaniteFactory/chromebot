package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/cdp"
	"github.com/chromedp/cdproto/network"
	"github.com/chromedp/cdproto/storage"
)

// Storage executes a cdproto command under Storage domain.
type Storage struct {
	ctxWithExecutor context.Context
}

// ClearDataForOrigin clears storage for origin.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Storage#method-clearDataForOrigin
//
// parameters:
//  - `origin`: Security origin.
//  - `storageTypes`: Comma separated list of StorageType to clear.
func (doStorage Storage) ClearDataForOrigin(origin string, storageTypes string) (err error) {
	b := storage.ClearDataForOrigin(origin, storageTypes)
	return b.Do(doStorage.ctxWithExecutor)
}

// GetCookies returns all browser cookies.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Storage#method-getCookies
//
// parameters:
//  - `browserContextID`: This can be nil. (Optional) Browser context to use when called on the browser endpoint.
//
// returns:
//  - `retCookies`: Array of cookie objects.
func (doStorage Storage) GetCookies(browserContextID *cdp.BrowserContextID) (retCookies []*network.Cookie, err error) {
	b := storage.GetCookies()
	if browserContextID != nil {
		b = b.WithBrowserContextID(*browserContextID)
	}
	return b.Do(doStorage.ctxWithExecutor)
}

// SetCookies sets given cookies.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Storage#method-setCookies
//
// parameters:
//  - `cookies`: Cookies to be set.
//  - `browserContextID`: This can be nil. (Optional) Browser context to use when called on the browser endpoint.
func (doStorage Storage) SetCookies(cookies []*network.CookieParam, browserContextID *cdp.BrowserContextID) (err error) {
	b := storage.SetCookies(cookies)
	if browserContextID != nil {
		b = b.WithBrowserContextID(*browserContextID)
	}
	return b.Do(doStorage.ctxWithExecutor)
}

// ClearCookies clears cookies.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Storage#method-clearCookies
//
// parameters:
//  - `browserContextID`: This can be nil. (Optional) Browser context to use when called on the browser endpoint.
func (doStorage Storage) ClearCookies(browserContextID *cdp.BrowserContextID) (err error) {
	b := storage.ClearCookies()
	if browserContextID != nil {
		b = b.WithBrowserContextID(*browserContextID)
	}
	return b.Do(doStorage.ctxWithExecutor)
}

// GetUsageAndQuota returns usage and quota in bytes.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Storage#method-getUsageAndQuota
//
// parameters:
//  - `origin`: Security origin.
//
// returns:
//  - `retUsage`: Storage usage (bytes).
//  - `retQuota`: Storage quota (bytes).
//  - `retUsageBreakdown`: Storage usage per type (bytes).
func (doStorage Storage) GetUsageAndQuota(origin string) (retUsage float64, retQuota float64, retUsageBreakdown []*storage.UsageForType, err error) {
	b := storage.GetUsageAndQuota(origin)
	return b.Do(doStorage.ctxWithExecutor)
}

// TrackCacheStorageForOrigin registers origin to be notified when an update
// occurs to its cache storage list.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Storage#method-trackCacheStorageForOrigin
//
// parameters:
//  - `origin`: Security origin.
func (doStorage Storage) TrackCacheStorageForOrigin(origin string) (err error) {
	b := storage.TrackCacheStorageForOrigin(origin)
	return b.Do(doStorage.ctxWithExecutor)
}

// TrackIndexedDBForOrigin registers origin to be notified when an update
// occurs to its IndexedDB.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Storage#method-trackIndexedDBForOrigin
//
// parameters:
//  - `origin`: Security origin.
func (doStorage Storage) TrackIndexedDBForOrigin(origin string) (err error) {
	b := storage.TrackIndexedDBForOrigin(origin)
	return b.Do(doStorage.ctxWithExecutor)
}

// UntrackCacheStorageForOrigin unregisters origin from receiving
// notifications for cache storage.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Storage#method-untrackCacheStorageForOrigin
//
// parameters:
//  - `origin`: Security origin.
func (doStorage Storage) UntrackCacheStorageForOrigin(origin string) (err error) {
	b := storage.UntrackCacheStorageForOrigin(origin)
	return b.Do(doStorage.ctxWithExecutor)
}

// UntrackIndexedDBForOrigin unregisters origin from receiving notifications
// for IndexedDB.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Storage#method-untrackIndexedDBForOrigin
//
// parameters:
//  - `origin`: Security origin.
func (doStorage Storage) UntrackIndexedDBForOrigin(origin string) (err error) {
	b := storage.UntrackIndexedDBForOrigin(origin)
	return b.Do(doStorage.ctxWithExecutor)
}
