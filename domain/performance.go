package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/performance"
)

// Performance executes a cdproto command under Performance domain.
type Performance struct {
	ctxWithExecutor context.Context
}

// Disable disable collecting and reporting metrics.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Performance#method-disable
func (doPerformance Performance) Disable() (err error) {
	b := performance.Disable()
	return b.Do(doPerformance.ctxWithExecutor)
}

// Enable enable collecting and reporting metrics.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Performance#method-enable
func (doPerformance Performance) Enable() (err error) {
	b := performance.Enable()
	return b.Do(doPerformance.ctxWithExecutor)
}

// SetTimeDomain sets time domain to use for collecting and reporting
// duration metrics. Note that this must be called before enabling metrics
// collection. Calling this method while metrics collection is enabled returns
// an error.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Performance#method-setTimeDomain
//
// parameters:
//  - `timeDomain`: Time domain
func (doPerformance Performance) SetTimeDomain(timeDomain performance.SetTimeDomainTimeDomain) (err error) {
	b := performance.SetTimeDomain(timeDomain)
	return b.Do(doPerformance.ctxWithExecutor)
}

// GetMetrics retrieve current values of run-time metrics.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Performance#method-getMetrics
//
// returns:
//  - `retMetrics`: Current values for run-time metrics.
func (doPerformance Performance) GetMetrics() (retMetrics []*performance.Metric, err error) {
	b := performance.GetMetrics()
	return b.Do(doPerformance.ctxWithExecutor)
}
