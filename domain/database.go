package domain

// Code generated by chromebot-domain-gen. DO NOT EDIT.

import (
	"context"

	"github.com/chromedp/cdproto/database"
	"github.com/mailru/easyjson"
)

// Database executes a cdproto command under Database domain.
type Database struct {
	ctxWithExecutor context.Context
}

// Disable disables database tracking, prevents database events from being
// sent to the client.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Database#method-disable
func (doDatabase Database) Disable() (err error) {
	b := database.Disable()
	return b.Do(doDatabase.ctxWithExecutor)
}

// Enable enables database tracking, database events will now be delivered to
// the client.
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Database#method-enable
func (doDatabase Database) Enable() (err error) {
	b := database.Enable()
	return b.Do(doDatabase.ctxWithExecutor)
}

// ExecuteSQL [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Database#method-executeSQL
//
// parameters:
//  - `databaseID`
//  - `query`
//
// returns:
//  - `retColumnNames`
//  - `retValues`
//  - `retSQLError`
func (doDatabase Database) ExecuteSQL(databaseID database.ID, query string) (retColumnNames []string, retValues []easyjson.RawMessage, retSQLError *database.Error, err error) {
	b := database.ExecuteSQL(databaseID, query)
	return b.Do(doDatabase.ctxWithExecutor)
}

// GetDatabaseTableNames [no description].
//
// See: https://chromedevtools.github.io/devtools-protocol/tot/Database#method-getDatabaseTableNames
//
// parameters:
//  - `databaseID`
//
// returns:
//  - `retTableNames`
func (doDatabase Database) GetDatabaseTableNames(databaseID database.ID) (retTableNames []string, err error) {
	b := database.GetDatabaseTableNames(databaseID)
	return b.Do(doDatabase.ctxWithExecutor)
}
